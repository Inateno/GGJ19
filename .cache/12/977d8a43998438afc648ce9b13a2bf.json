{"id":"../node_modules/@dreamirl/dreamengine/node_modules/pixi.js/lib/prepare/webgl/WebGLPrepare.js","dependencies":[{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\prepare\\webgl\\WebGLPrepare.js.map","includedInParent":true,"mtime":1505920125000},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\package.json","includedInParent":true,"mtime":1548525594111},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\package.json","includedInParent":true,"mtime":1548517163228},{"name":"../../core","loc":{"line":5,"column":20},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\prepare\\webgl\\WebGLPrepare.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\index.js"},{"name":"../BasePrepare","loc":{"line":9,"column":28},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\prepare\\webgl\\WebGLPrepare.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\prepare\\BasePrepare.js"}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _core = require('../../core');\n\nvar core = _interopRequireWildcard(_core);\n\nvar _BasePrepare2 = require('../BasePrepare');\n\nvar _BasePrepare3 = _interopRequireDefault(_BasePrepare2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.prepare\n *\n * @class\n * @extends PIXI.prepare.BasePrepare\n * @memberof PIXI.prepare\n */\nvar WebGLPrepare = function (_BasePrepare) {\n    _inherits(WebGLPrepare, _BasePrepare);\n\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - A reference to the current renderer\n     */\n    function WebGLPrepare(renderer) {\n        _classCallCheck(this, WebGLPrepare);\n\n        var _this = _possibleConstructorReturn(this, _BasePrepare.call(this, renderer));\n\n        _this.uploadHookHelper = _this.renderer;\n\n        // Add textures and graphics to upload\n        _this.registerFindHook(findGraphics);\n        _this.registerUploadHook(uploadBaseTextures);\n        _this.registerUploadHook(uploadGraphics);\n        return _this;\n    }\n\n    return WebGLPrepare;\n}(_BasePrepare3.default);\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {PIXI.WebGLRenderer} renderer - instance of the webgl renderer\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\n\n\nexports.default = WebGLPrepare;\nfunction uploadBaseTextures(renderer, item) {\n    if (item instanceof core.BaseTexture) {\n        // if the texture already has a GL texture, then the texture has been prepared or rendered\n        // before now. If the texture changed, then the changer should be calling texture.update() which\n        // reuploads the texture without need for preparing it again\n        if (!item._glTextures[renderer.CONTEXT_UID]) {\n            renderer.textureManager.updateTexture(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to upload PIXI.Graphics to the GPU.\n *\n * @private\n * @param {PIXI.WebGLRenderer} renderer - instance of the webgl renderer\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadGraphics(renderer, item) {\n    if (item instanceof core.Graphics) {\n        // if the item is not dirty and already has webgl data, then it got prepared or rendered\n        // before now and we shouldn't waste time updating it again\n        if (item.dirty || item.clearDirty || !item._webGL[renderer.plugins.graphics.CONTEXT_UID]) {\n            renderer.plugins.graphics.updateGraphics(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find graphics.\n *\n * @private\n * @param {PIXI.DisplayObject} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Graphics object was found.\n */\nfunction findGraphics(item, queue) {\n    if (item instanceof core.Graphics) {\n        queue.push(item);\n\n        return true;\n    }\n\n    return false;\n}\n\ncore.WebGLRenderer.registerPlugin('prepare', WebGLPrepare);\n","map":{"version":3,"sources":["../../../src/prepare/webgl/WebGLPrepare.js"],"names":["core","WebGLPrepare","renderer","uploadHookHelper","registerFindHook","findGraphics","registerUploadHook","uploadBaseTextures","uploadGraphics","item","BaseTexture","_glTextures","CONTEXT_UID","textureManager","updateTexture","Graphics","dirty","clearDirty","_webGL","plugins","graphics","updateGraphics","queue","push","WebGLRenderer","registerPlugin"],"mappings":";;;;AAAA;;IAAYA,I;;AACZ;;;;;;;;;;;;;;AAEA;;;;;;;;;IASqBC,Y;;;AAEjB;;;AAGA,0BAAYC,QAAZ,EACA;AAAA;;AAAA,qDACI,wBAAMA,QAAN,CADJ;;AAGI,cAAKC,gBAAL,GAAwB,MAAKD,QAA7B;;AAEA;AACA,cAAKE,gBAAL,CAAsBC,YAAtB;AACA,cAAKC,kBAAL,CAAwBC,kBAAxB;AACA,cAAKD,kBAAL,CAAwBE,cAAxB;AARJ;AASC;;;;AAEL;;;;;;;;;;kBAjBqBP,Y;AAyBrB,SAASM,kBAAT,CAA4BL,QAA5B,EAAsCO,IAAtC,EACA;AACI,QAAIA,gBAAgBT,KAAKU,WAAzB,EACA;AACI;AACA;AACA;AACA,YAAI,CAACD,KAAKE,WAAL,CAAiBT,SAASU,WAA1B,CAAL,EACA;AACIV,qBAASW,cAAT,CAAwBC,aAAxB,CAAsCL,IAAtC;AACH;;AAED,eAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED;;;;;;;;AAQA,SAASD,cAAT,CAAwBN,QAAxB,EAAkCO,IAAlC,EACA;AACI,QAAIA,gBAAgBT,KAAKe,QAAzB,EACA;AACI;AACA;AACA,YAAIN,KAAKO,KAAL,IAAcP,KAAKQ,UAAnB,IAAiC,CAACR,KAAKS,MAAL,CAAYhB,SAASiB,OAAT,CAAiBC,QAAjB,CAA0BR,WAAtC,CAAtC,EACA;AACIV,qBAASiB,OAAT,CAAiBC,QAAjB,CAA0BC,cAA1B,CAAyCZ,IAAzC;AACH;;AAED,eAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED;;;;;;;;AAQA,SAASJ,YAAT,CAAsBI,IAAtB,EAA4Ba,KAA5B,EACA;AACI,QAAIb,gBAAgBT,KAAKe,QAAzB,EACA;AACIO,cAAMC,IAAN,CAAWd,IAAX;;AAEA,eAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAEDT,KAAKwB,aAAL,CAAmBC,cAAnB,CAAkC,SAAlC,EAA6CxB,YAA7C","file":"WebGLPrepare.js","sourcesContent":["import * as core from '../../core';\nimport BasePrepare from '../BasePrepare';\n\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.prepare\n *\n * @class\n * @extends PIXI.prepare.BasePrepare\n * @memberof PIXI.prepare\n */\nexport default class WebGLPrepare extends BasePrepare\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.uploadHookHelper = this.renderer;\n\n        // Add textures and graphics to upload\n        this.registerFindHook(findGraphics);\n        this.registerUploadHook(uploadBaseTextures);\n        this.registerUploadHook(uploadGraphics);\n    }\n}\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {PIXI.WebGLRenderer} renderer - instance of the webgl renderer\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadBaseTextures(renderer, item)\n{\n    if (item instanceof core.BaseTexture)\n    {\n        // if the texture already has a GL texture, then the texture has been prepared or rendered\n        // before now. If the texture changed, then the changer should be calling texture.update() which\n        // reuploads the texture without need for preparing it again\n        if (!item._glTextures[renderer.CONTEXT_UID])\n        {\n            renderer.textureManager.updateTexture(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to upload PIXI.Graphics to the GPU.\n *\n * @private\n * @param {PIXI.WebGLRenderer} renderer - instance of the webgl renderer\n * @param {PIXI.DisplayObject} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadGraphics(renderer, item)\n{\n    if (item instanceof core.Graphics)\n    {\n        // if the item is not dirty and already has webgl data, then it got prepared or rendered\n        // before now and we shouldn't waste time updating it again\n        if (item.dirty || item.clearDirty || !item._webGL[renderer.plugins.graphics.CONTEXT_UID])\n        {\n            renderer.plugins.graphics.updateGraphics(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find graphics.\n *\n * @private\n * @param {PIXI.DisplayObject} item - Display object to check\n * @param {Array<*>} queue - Collection of items to upload\n * @return {boolean} if a PIXI.Graphics object was found.\n */\nfunction findGraphics(item, queue)\n{\n    if (item instanceof core.Graphics)\n    {\n        queue.push(item);\n\n        return true;\n    }\n\n    return false;\n}\n\ncore.WebGLRenderer.registerPlugin('prepare', WebGLPrepare);\n"]}},"hash":"9d0f8ad21f581e92e680d3cf833ec41f","cacheData":{"env":{}}}