{"id":"../node_modules/@dreamirl/dreamengine/node_modules/pixi.js/lib/filters/blur/BlurXFilter.js","dependencies":[{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\filters\\blur\\BlurXFilter.js.map","includedInParent":true,"mtime":1505920123000},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\package.json","includedInParent":true,"mtime":1548525594111},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\package.json","includedInParent":true,"mtime":1548517163228},{"name":"../../core","loc":{"line":7,"column":20},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\filters\\blur\\BlurXFilter.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\index.js"},{"name":"./generateBlurVertSource","loc":{"line":11,"column":38},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\filters\\blur\\BlurXFilter.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\filters\\blur\\generateBlurVertSource.js"},{"name":"./generateBlurFragSource","loc":{"line":15,"column":38},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\filters\\blur\\BlurXFilter.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\filters\\blur\\generateBlurFragSource.js"},{"name":"./getMaxBlurKernelSize","loc":{"line":19,"column":36},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\filters\\blur\\BlurXFilter.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\filters\\blur\\getMaxBlurKernelSize.js"}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _core = require('../../core');\n\nvar core = _interopRequireWildcard(_core);\n\nvar _generateBlurVertSource = require('./generateBlurVertSource');\n\nvar _generateBlurVertSource2 = _interopRequireDefault(_generateBlurVertSource);\n\nvar _generateBlurFragSource = require('./generateBlurFragSource');\n\nvar _generateBlurFragSource2 = _interopRequireDefault(_generateBlurFragSource);\n\nvar _getMaxBlurKernelSize = require('./getMaxBlurKernelSize');\n\nvar _getMaxBlurKernelSize2 = _interopRequireDefault(_getMaxBlurKernelSize);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * The BlurXFilter applies a horizontal Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nvar BlurXFilter = function (_core$Filter) {\n    _inherits(BlurXFilter, _core$Filter);\n\n    /**\n     * @param {number} strength - The strength of the blur filter.\n     * @param {number} quality - The quality of the blur filter.\n     * @param {number} resolution - The resolution of the blur filter.\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    function BlurXFilter(strength, quality, resolution, kernelSize) {\n        _classCallCheck(this, BlurXFilter);\n\n        kernelSize = kernelSize || 5;\n        var vertSrc = (0, _generateBlurVertSource2.default)(kernelSize, true);\n        var fragSrc = (0, _generateBlurFragSource2.default)(kernelSize);\n\n        var _this = _possibleConstructorReturn(this, _core$Filter.call(this,\n        // vertex shader\n        vertSrc,\n        // fragment shader\n        fragSrc));\n\n        _this.resolution = resolution || core.settings.RESOLUTION;\n\n        _this._quality = 0;\n\n        _this.quality = quality || 4;\n        _this.strength = strength || 8;\n\n        _this.firstRun = true;\n        return _this;\n    }\n\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.FilterManager} filterManager - The manager.\n     * @param {PIXI.RenderTarget} input - The input target.\n     * @param {PIXI.RenderTarget} output - The output target.\n     * @param {boolean} clear - Should the output be cleared before rendering?\n     */\n\n\n    BlurXFilter.prototype.apply = function apply(filterManager, input, output, clear) {\n        if (this.firstRun) {\n            var gl = filterManager.renderer.gl;\n            var kernelSize = (0, _getMaxBlurKernelSize2.default)(gl);\n\n            this.vertexSrc = (0, _generateBlurVertSource2.default)(kernelSize, true);\n            this.fragmentSrc = (0, _generateBlurFragSource2.default)(kernelSize);\n\n            this.firstRun = false;\n        }\n\n        this.uniforms.strength = 1 / output.size.width * (output.size.width / input.size.width);\n\n        // screen space!\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes; // / this.passes//Math.pow(1, this.passes);\n\n        if (this.passes === 1) {\n            filterManager.applyFilter(this, input, output, clear);\n        } else {\n            var renderTarget = filterManager.getRenderTarget(true);\n            var flip = input;\n            var flop = renderTarget;\n\n            for (var i = 0; i < this.passes - 1; i++) {\n                filterManager.applyFilter(this, flip, flop, true);\n\n                var temp = flop;\n\n                flop = flip;\n                flip = temp;\n            }\n\n            filterManager.applyFilter(this, flip, output, clear);\n\n            filterManager.returnRenderTarget(renderTarget);\n        }\n    };\n\n    /**\n     * Sets the strength of both the blur.\n     *\n     * @member {number}\n     * @default 16\n     */\n\n\n    _createClass(BlurXFilter, [{\n        key: 'blur',\n        get: function get() {\n            return this.strength;\n        },\n        set: function set(value) // eslint-disable-line require-jsdoc\n        {\n            this.padding = Math.abs(value) * 2;\n            this.strength = value;\n        }\n\n        /**\n        * Sets the quality of the blur by modifying the number of passes. More passes means higher\n        * quaility bluring but the lower the performance.\n        *\n        * @member {number}\n        * @default 4\n        */\n\n    }, {\n        key: 'quality',\n        get: function get() {\n            return this._quality;\n        },\n        set: function set(value) // eslint-disable-line require-jsdoc\n        {\n            this._quality = value;\n            this.passes = value;\n        }\n    }]);\n\n    return BlurXFilter;\n}(core.Filter);\n\nexports.default = BlurXFilter;\n","map":{"version":3,"sources":["../../../src/filters/blur/BlurXFilter.js"],"names":["core","BlurXFilter","strength","quality","resolution","kernelSize","vertSrc","fragSrc","settings","RESOLUTION","_quality","firstRun","apply","filterManager","input","output","clear","gl","renderer","vertexSrc","fragmentSrc","uniforms","size","width","passes","applyFilter","renderTarget","getRenderTarget","flip","flop","i","temp","returnRenderTarget","value","padding","Math","abs","Filter"],"mappings":";;;;;;AAAA;;IAAYA,I;;AACZ;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;;;IAOqBC,W;;;AAEjB;;;;;;AAMA,yBAAYC,QAAZ,EAAsBC,OAAtB,EAA+BC,UAA/B,EAA2CC,UAA3C,EACA;AAAA;;AACIA,qBAAaA,cAAc,CAA3B;AACA,YAAMC,UAAU,sCAAuBD,UAAvB,EAAmC,IAAnC,CAAhB;AACA,YAAME,UAAU,sCAAuBF,UAAvB,CAAhB;;AAHJ,qDAKI;AACI;AACAC,eAFJ;AAGI;AACAC,eAJJ,CALJ;;AAYI,cAAKH,UAAL,GAAkBA,cAAcJ,KAAKQ,QAAL,CAAcC,UAA9C;;AAEA,cAAKC,QAAL,GAAgB,CAAhB;;AAEA,cAAKP,OAAL,GAAeA,WAAW,CAA1B;AACA,cAAKD,QAAL,GAAgBA,YAAY,CAA5B;;AAEA,cAAKS,QAAL,GAAgB,IAAhB;AAnBJ;AAoBC;;AAED;;;;;;;;;;0BAQAC,K,kBAAMC,a,EAAeC,K,EAAOC,M,EAAQC,K,EACpC;AACI,YAAI,KAAKL,QAAT,EACA;AACI,gBAAMM,KAAKJ,cAAcK,QAAd,CAAuBD,EAAlC;AACA,gBAAMZ,aAAa,oCAAqBY,EAArB,CAAnB;;AAEA,iBAAKE,SAAL,GAAiB,sCAAuBd,UAAvB,EAAmC,IAAnC,CAAjB;AACA,iBAAKe,WAAL,GAAmB,sCAAuBf,UAAvB,CAAnB;;AAEA,iBAAKM,QAAL,GAAgB,KAAhB;AACH;;AAED,aAAKU,QAAL,CAAcnB,QAAd,GAA0B,IAAIa,OAAOO,IAAP,CAAYC,KAAjB,IAA2BR,OAAOO,IAAP,CAAYC,KAAZ,GAAoBT,MAAMQ,IAAN,CAAWC,KAA1D,CAAzB;;AAEA;AACA,aAAKF,QAAL,CAAcnB,QAAd,IAA0B,KAAKA,QAA/B;AACA,aAAKmB,QAAL,CAAcnB,QAAd,IAA0B,KAAKsB,MAA/B,CAhBJ,CAgB0C;;AAEtC,YAAI,KAAKA,MAAL,KAAgB,CAApB,EACA;AACIX,0BAAcY,WAAd,CAA0B,IAA1B,EAAgCX,KAAhC,EAAuCC,MAAvC,EAA+CC,KAA/C;AACH,SAHD,MAKA;AACI,gBAAMU,eAAeb,cAAcc,eAAd,CAA8B,IAA9B,CAArB;AACA,gBAAIC,OAAOd,KAAX;AACA,gBAAIe,OAAOH,YAAX;;AAEA,iBAAK,IAAII,IAAI,CAAb,EAAgBA,IAAI,KAAKN,MAAL,GAAc,CAAlC,EAAqCM,GAArC,EACA;AACIjB,8BAAcY,WAAd,CAA0B,IAA1B,EAAgCG,IAAhC,EAAsCC,IAAtC,EAA4C,IAA5C;;AAEA,oBAAME,OAAOF,IAAb;;AAEAA,uBAAOD,IAAP;AACAA,uBAAOG,IAAP;AACH;;AAEDlB,0BAAcY,WAAd,CAA0B,IAA1B,EAAgCG,IAAhC,EAAsCb,MAAtC,EAA8CC,KAA9C;;AAEAH,0BAAcmB,kBAAd,CAAiCN,YAAjC;AACH;AACJ,K;;AAED;;;;;;;;;;4BAOA;AACI,mBAAO,KAAKxB,QAAZ;AACH,S;0BAEQ+B,K,EAAO;AAChB;AACI,iBAAKC,OAAL,GAAeC,KAAKC,GAAL,CAASH,KAAT,IAAkB,CAAjC;AACA,iBAAK/B,QAAL,GAAgB+B,KAAhB;AACH;;AAEA;;;;;;;;;;4BAQD;AACI,mBAAO,KAAKvB,QAAZ;AACH,S;0BAEWuB,K,EAAO;AACnB;AACI,iBAAKvB,QAAL,GAAgBuB,KAAhB;AACA,iBAAKT,MAAL,GAAcS,KAAd;AACH;;;;EArHoCjC,KAAKqC,M;;kBAAzBpC,W","file":"BlurXFilter.js","sourcesContent":["import * as core from '../../core';\nimport generateBlurVertSource from './generateBlurVertSource';\nimport generateBlurFragSource from './generateBlurFragSource';\nimport getMaxBlurKernelSize from './getMaxBlurKernelSize';\n\n/**\n * The BlurXFilter applies a horizontal Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport default class BlurXFilter extends core.Filter\n{\n    /**\n     * @param {number} strength - The strength of the blur filter.\n     * @param {number} quality - The quality of the blur filter.\n     * @param {number} resolution - The resolution of the blur filter.\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(strength, quality, resolution, kernelSize)\n    {\n        kernelSize = kernelSize || 5;\n        const vertSrc = generateBlurVertSource(kernelSize, true);\n        const fragSrc = generateBlurFragSource(kernelSize);\n\n        super(\n            // vertex shader\n            vertSrc,\n            // fragment shader\n            fragSrc\n        );\n\n        this.resolution = resolution || core.settings.RESOLUTION;\n\n        this._quality = 0;\n\n        this.quality = quality || 4;\n        this.strength = strength || 8;\n\n        this.firstRun = true;\n    }\n\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.FilterManager} filterManager - The manager.\n     * @param {PIXI.RenderTarget} input - The input target.\n     * @param {PIXI.RenderTarget} output - The output target.\n     * @param {boolean} clear - Should the output be cleared before rendering?\n     */\n    apply(filterManager, input, output, clear)\n    {\n        if (this.firstRun)\n        {\n            const gl = filterManager.renderer.gl;\n            const kernelSize = getMaxBlurKernelSize(gl);\n\n            this.vertexSrc = generateBlurVertSource(kernelSize, true);\n            this.fragmentSrc = generateBlurFragSource(kernelSize);\n\n            this.firstRun = false;\n        }\n\n        this.uniforms.strength = (1 / output.size.width) * (output.size.width / input.size.width);\n\n        // screen space!\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes;// / this.passes//Math.pow(1, this.passes);\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clear);\n        }\n        else\n        {\n            const renderTarget = filterManager.getRenderTarget(true);\n            let flip = input;\n            let flop = renderTarget;\n\n            for (let i = 0; i < this.passes - 1; i++)\n            {\n                filterManager.applyFilter(this, flip, flop, true);\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n            }\n\n            filterManager.applyFilter(this, flip, output, clear);\n\n            filterManager.returnRenderTarget(renderTarget);\n        }\n    }\n\n    /**\n     * Sets the strength of both the blur.\n     *\n     * @member {number}\n     * @default 16\n     */\n    get blur()\n    {\n        return this.strength;\n    }\n\n    set blur(value) // eslint-disable-line require-jsdoc\n    {\n        this.padding = Math.abs(value) * 2;\n        this.strength = value;\n    }\n\n     /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quaility bluring but the lower the performance.\n     *\n     * @member {number}\n     * @default 4\n     */\n    get quality()\n    {\n        return this._quality;\n    }\n\n    set quality(value) // eslint-disable-line require-jsdoc\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n"]}},"hash":"56510aed89fd0348f85f69227c92c0fc","cacheData":{"env":{}}}