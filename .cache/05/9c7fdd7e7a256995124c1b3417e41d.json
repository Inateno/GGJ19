{"id":"../node_modules/@dreamirl/dreamengine/node_modules/pixi.js/lib/loaders/spritesheetParser.js","dependencies":[{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\spritesheetParser.js.map","includedInParent":true,"mtime":1505920124000},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\package.json","includedInParent":true,"mtime":1548525594111},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\package.json","includedInParent":true,"mtime":1548517163228},{"name":"resource-loader","loc":{"line":40,"column":30},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\spritesheetParser.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\resource-loader\\lib\\index.js"},{"name":"url","loc":{"line":42,"column":19},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\spritesheetParser.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\url\\url.js"},{"name":"../core","loc":{"line":46,"column":20},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\spritesheetParser.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\index.js"}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nexports.default = function () {\n    return function spritesheetParser(resource, next) {\n        var imageResourceName = resource.name + '_image';\n\n        // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n        if (!resource.data || resource.type !== _resourceLoader.Resource.TYPE.JSON || !resource.data.frames || this.resources[imageResourceName]) {\n            next();\n\n            return;\n        }\n\n        var loadOptions = {\n            crossOrigin: resource.crossOrigin,\n            loadType: _resourceLoader.Resource.LOAD_TYPE.IMAGE,\n            metadata: resource.metadata.imageMetadata,\n            parentResource: resource\n        };\n\n        var resourcePath = getResourcePath(resource, this.baseUrl);\n\n        // load the image for this sheet\n        this.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res) {\n            var spritesheet = new _core.Spritesheet(res.texture.baseTexture, resource.data, resource.url);\n\n            spritesheet.parse(function () {\n                resource.spritesheet = spritesheet;\n                resource.textures = spritesheet.textures;\n                next();\n            });\n        });\n    };\n};\n\nexports.getResourcePath = getResourcePath;\n\nvar _resourceLoader = require('resource-loader');\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _core = require('../core');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getResourcePath(resource, baseUrl) {\n    // Prepend url path unless the resource image is a data url\n    if (resource.isDataUrl) {\n        return resource.data.meta.image;\n    }\n\n    return _url2.default.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n}\n","map":{"version":3,"sources":["../../src/loaders/spritesheetParser.js"],"names":["spritesheetParser","resource","next","imageResourceName","name","data","type","TYPE","JSON","frames","resources","loadOptions","crossOrigin","loadType","LOAD_TYPE","IMAGE","metadata","imageMetadata","parentResource","resourcePath","getResourcePath","baseUrl","add","onImageLoad","res","spritesheet","texture","baseTexture","url","parse","textures","isDataUrl","meta","image","resolve","replace"],"mappings":";;;;kBAIe,YACf;AACI,WAAO,SAASA,iBAAT,CAA2BC,QAA3B,EAAqCC,IAArC,EACP;AACI,YAAMC,oBAAuBF,SAASG,IAAhC,WAAN;;AAEA;AACA,YAAI,CAACH,SAASI,IAAV,IACGJ,SAASK,IAAT,KAAkB,yBAASC,IAAT,CAAcC,IADnC,IAEG,CAACP,SAASI,IAAT,CAAcI,MAFlB,IAGG,KAAKC,SAAL,CAAeP,iBAAf,CAHP,EAKA;AACID;;AAEA;AACH;;AAED,YAAMS,cAAc;AAChBC,yBAAaX,SAASW,WADN;AAEhBC,sBAAU,yBAASC,SAAT,CAAmBC,KAFb;AAGhBC,sBAAUf,SAASe,QAAT,CAAkBC,aAHZ;AAIhBC,4BAAgBjB;AAJA,SAApB;;AAOA,YAAMkB,eAAeC,gBAAgBnB,QAAhB,EAA0B,KAAKoB,OAA/B,CAArB;;AAEA;AACA,aAAKC,GAAL,CAASnB,iBAAT,EAA4BgB,YAA5B,EAA0CR,WAA1C,EAAuD,SAASY,WAAT,CAAqBC,GAArB,EACvD;AACI,gBAAMC,cAAc,sBAChBD,IAAIE,OAAJ,CAAYC,WADI,EAEhB1B,SAASI,IAFO,EAGhBJ,SAAS2B,GAHO,CAApB;;AAMAH,wBAAYI,KAAZ,CAAkB,YAClB;AACI5B,yBAASwB,WAAT,GAAuBA,WAAvB;AACAxB,yBAAS6B,QAAT,GAAoBL,YAAYK,QAAhC;AACA5B;AACH,aALD;AAMH,SAdD;AAeH,KAzCD;AA0CH,C;;QAEekB,e,GAAAA,e;;AAlDhB;;AACA;;;;AACA;;;;AAgDO,SAASA,eAAT,CAAyBnB,QAAzB,EAAmCoB,OAAnC,EACP;AACI;AACA,QAAIpB,SAAS8B,SAAb,EACA;AACI,eAAO9B,SAASI,IAAT,CAAc2B,IAAd,CAAmBC,KAA1B;AACH;;AAED,WAAO,cAAIC,OAAJ,CAAYjC,SAAS2B,GAAT,CAAaO,OAAb,CAAqBd,OAArB,EAA8B,EAA9B,CAAZ,EAA+CpB,SAASI,IAAT,CAAc2B,IAAd,CAAmBC,KAAlE,CAAP;AACH","file":"spritesheetParser.js","sourcesContent":["import { Resource } from 'resource-loader';\nimport url from 'url';\nimport { Spritesheet } from '../core';\n\nexport default function ()\n{\n    return function spritesheetParser(resource, next)\n    {\n        const imageResourceName = `${resource.name}_image`;\n\n        // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n        if (!resource.data\n            || resource.type !== Resource.TYPE.JSON\n            || !resource.data.frames\n            || this.resources[imageResourceName]\n        )\n        {\n            next();\n\n            return;\n        }\n\n        const loadOptions = {\n            crossOrigin: resource.crossOrigin,\n            loadType: Resource.LOAD_TYPE.IMAGE,\n            metadata: resource.metadata.imageMetadata,\n            parentResource: resource,\n        };\n\n        const resourcePath = getResourcePath(resource, this.baseUrl);\n\n        // load the image for this sheet\n        this.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res)\n        {\n            const spritesheet = new Spritesheet(\n                res.texture.baseTexture,\n                resource.data,\n                resource.url\n            );\n\n            spritesheet.parse(() =>\n            {\n                resource.spritesheet = spritesheet;\n                resource.textures = spritesheet.textures;\n                next();\n            });\n        });\n    };\n}\n\nexport function getResourcePath(resource, baseUrl)\n{\n    // Prepend url path unless the resource image is a data url\n    if (resource.isDataUrl)\n    {\n        return resource.data.meta.image;\n    }\n\n    return url.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n}\n"]}},"hash":"ce563115261365ba6fc05274ab6b1119","cacheData":{"env":{}}}