{"id":"../node_modules/@dreamirl/dreamengine/node_modules/pixi.js/lib/core/renderers/webgl/managers/WebGLManager.js","dependencies":[{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\renderers\\webgl\\managers\\WebGLManager.js.map","includedInParent":true,"mtime":1505920121000},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\package.json","includedInParent":true,"mtime":1548525594111},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\package.json","includedInParent":true,"mtime":1548517163228}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @class\n * @memberof PIXI\n */\nvar WebGLManager = function () {\n  /**\n   * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n   */\n  function WebGLManager(renderer) {\n    _classCallCheck(this, WebGLManager);\n\n    /**\n     * The renderer this manager works for.\n     *\n     * @member {PIXI.WebGLRenderer}\n     */\n    this.renderer = renderer;\n\n    this.renderer.on('context', this.onContextChange, this);\n  }\n\n  /**\n   * Generic method called when there is a WebGL context change.\n   *\n   */\n\n\n  WebGLManager.prototype.onContextChange = function onContextChange() {}\n  // do some codes init!\n\n\n  /**\n   * Generic destroy methods to be overridden by the subclass\n   *\n   */\n  ;\n\n  WebGLManager.prototype.destroy = function destroy() {\n    this.renderer.off('context', this.onContextChange, this);\n\n    this.renderer = null;\n  };\n\n  return WebGLManager;\n}();\n\nexports.default = WebGLManager;\n","map":{"version":3,"sources":["../../../../../src/core/renderers/webgl/managers/WebGLManager.js"],"names":["WebGLManager","renderer","on","onContextChange","destroy","off"],"mappings":";;;;;;AAAA;;;;IAIqBA,Y;AAEjB;;;AAGA,wBAAYC,QAAZ,EACA;AAAA;;AACI;;;;;AAKA,SAAKA,QAAL,GAAgBA,QAAhB;;AAEA,SAAKA,QAAL,CAAcC,EAAd,CAAiB,SAAjB,EAA4B,KAAKC,eAAjC,EAAkD,IAAlD;AACH;;AAED;;;;;;yBAIAA,e,8BACA,CAEC;AADG;;;AAGJ;;;;;;yBAIAC,O,sBACA;AACI,SAAKH,QAAL,CAAcI,GAAd,CAAkB,SAAlB,EAA6B,KAAKF,eAAlC,EAAmD,IAAnD;;AAEA,SAAKF,QAAL,GAAgB,IAAhB;AACH,G;;;;;kBAnCgBD,Y","file":"WebGLManager.js","sourcesContent":["/**\n * @class\n * @memberof PIXI\n */\nexport default class WebGLManager\n{\n    /**\n     * @param {PIXI.WebGLRenderer} renderer - The renderer this manager works for.\n     */\n    constructor(renderer)\n    {\n        /**\n         * The renderer this manager works for.\n         *\n         * @member {PIXI.WebGLRenderer}\n         */\n        this.renderer = renderer;\n\n        this.renderer.on('context', this.onContextChange, this);\n    }\n\n    /**\n     * Generic method called when there is a WebGL context change.\n     *\n     */\n    onContextChange()\n    {\n        // do some codes init!\n    }\n\n    /**\n     * Generic destroy methods to be overridden by the subclass\n     *\n     */\n    destroy()\n    {\n        this.renderer.off('context', this.onContextChange, this);\n\n        this.renderer = null;\n    }\n}\n"]}},"hash":"97b4034079cc74d84983675a80d88176","cacheData":{"env":{}}}