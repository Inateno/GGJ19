{"id":"../node_modules/@dreamirl/dreamengine/node_modules/pixi.js/lib/core/sprites/webgl/generateMultiTextureShader.js","dependencies":[{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\sprites\\webgl\\generateMultiTextureShader.js.map","includedInParent":true,"mtime":1505920121000},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\package.json","includedInParent":true,"mtime":1548525594111},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\package.json","includedInParent":true,"mtime":1548517163228},{"name":"../../Shader","loc":{"line":6,"column":22},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\sprites\\webgl\\generateMultiTextureShader.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\Shader.js"},{"name":"path","loc":{"line":10,"column":20},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\sprites\\webgl\\generateMultiTextureShader.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\path-browserify\\index.js"}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\nexports.default = generateMultiTextureShader;\n\nvar _Shader = require('../../Shader');\n\nvar _Shader2 = _interopRequireDefault(_Shader);\n\nvar _path = require('path');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar fragTemplate = ['varying vec2 vTextureCoord;', 'varying vec4 vColor;', 'varying float vTextureId;', 'uniform sampler2D uSamplers[%count%];', 'void main(void){', 'vec4 color;', 'float textureId = floor(vTextureId+0.5);', '%forloop%', 'gl_FragColor = color * vColor;', '}'].join('\\n');\n\nfunction generateMultiTextureShader(gl, maxTextures) {\n    var vertexSrc = 'precision highp float;\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\nattribute float aTextureId;\\n\\nuniform mat3 projectionMatrix;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\nvarying float vTextureId;\\n\\nvoid main(void){\\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = aTextureCoord;\\n    vTextureId = aTextureId;\\n    vColor = aColor;\\n}\\n';\n    var fragmentSrc = fragTemplate;\n\n    fragmentSrc = fragmentSrc.replace(/%count%/gi, maxTextures);\n    fragmentSrc = fragmentSrc.replace(/%forloop%/gi, generateSampleSrc(maxTextures));\n\n    var shader = new _Shader2.default(gl, vertexSrc, fragmentSrc);\n\n    var sampleValues = [];\n\n    for (var i = 0; i < maxTextures; i++) {\n        sampleValues[i] = i;\n    }\n\n    shader.bind();\n    shader.uniforms.uSamplers = sampleValues;\n\n    return shader;\n}\n\nfunction generateSampleSrc(maxTextures) {\n    var src = '';\n\n    src += '\\n';\n    src += '\\n';\n\n    for (var i = 0; i < maxTextures; i++) {\n        if (i > 0) {\n            src += '\\nelse ';\n        }\n\n        if (i < maxTextures - 1) {\n            src += 'if(textureId == ' + i + '.0)';\n        }\n\n        src += '\\n{';\n        src += '\\n\\tcolor = texture2D(uSamplers[' + i + '], vTextureCoord);';\n        src += '\\n}';\n    }\n\n    src += '\\n';\n    src += '\\n';\n\n    return src;\n}\n","map":{"version":3,"sources":["../../../../src/core/sprites/webgl/generateMultiTextureShader.js"],"names":["generateMultiTextureShader","fragTemplate","join","gl","maxTextures","vertexSrc","fragmentSrc","replace","generateSampleSrc","shader","sampleValues","i","bind","uniforms","uSamplers","src"],"mappings":";;;kBAkBwBA,0B;;AAlBxB;;;;AAEA;;;;AAEA,IAAMC,eAAe,CACjB,6BADiB,EAEjB,sBAFiB,EAGjB,2BAHiB,EAIjB,uCAJiB,EAMjB,kBANiB,EAOjB,aAPiB,EAQjB,0CARiB,EASjB,WATiB,EAUjB,gCAViB,EAWjB,GAXiB,EAYnBC,IAZmB,CAYd,IAZc,CAArB;;AAce,SAASF,0BAAT,CAAoCG,EAApC,EAAwCC,WAAxC,EACf;AACI,QAAMC,qdAAN;AACA,QAAIC,cAAcL,YAAlB;;AAEAK,kBAAcA,YAAYC,OAAZ,CAAoB,WAApB,EAAiCH,WAAjC,CAAd;AACAE,kBAAcA,YAAYC,OAAZ,CAAoB,aAApB,EAAmCC,kBAAkBJ,WAAlB,CAAnC,CAAd;;AAEA,QAAMK,SAAS,qBAAWN,EAAX,EAAeE,SAAf,EAA0BC,WAA1B,CAAf;;AAEA,QAAMI,eAAe,EAArB;;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIP,WAApB,EAAiCO,GAAjC,EACA;AACID,qBAAaC,CAAb,IAAkBA,CAAlB;AACH;;AAEDF,WAAOG,IAAP;AACAH,WAAOI,QAAP,CAAgBC,SAAhB,GAA4BJ,YAA5B;;AAEA,WAAOD,MAAP;AACH;;AAED,SAASD,iBAAT,CAA2BJ,WAA3B,EACA;AACI,QAAIW,MAAM,EAAV;;AAEAA,WAAO,IAAP;AACAA,WAAO,IAAP;;AAEA,SAAK,IAAIJ,IAAI,CAAb,EAAgBA,IAAIP,WAApB,EAAiCO,GAAjC,EACA;AACI,YAAIA,IAAI,CAAR,EACA;AACII,mBAAO,SAAP;AACH;;AAED,YAAIJ,IAAIP,cAAc,CAAtB,EACA;AACIW,wCAA0BJ,CAA1B;AACH;;AAEDI,eAAO,KAAP;AACAA,oDAA0CJ,CAA1C;AACAI,eAAO,KAAP;AACH;;AAEDA,WAAO,IAAP;AACAA,WAAO,IAAP;;AAEA,WAAOA,GAAP;AACH","file":"generateMultiTextureShader.js","sourcesContent":["import Shader from '../../Shader';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nconst fragTemplate = [\n    'varying vec2 vTextureCoord;',\n    'varying vec4 vColor;',\n    'varying float vTextureId;',\n    'uniform sampler2D uSamplers[%count%];',\n\n    'void main(void){',\n    'vec4 color;',\n    'float textureId = floor(vTextureId+0.5);',\n    '%forloop%',\n    'gl_FragColor = color * vColor;',\n    '}',\n].join('\\n');\n\nexport default function generateMultiTextureShader(gl, maxTextures)\n{\n    const vertexSrc = readFileSync(join(__dirname, './texture.vert'), 'utf8');\n    let fragmentSrc = fragTemplate;\n\n    fragmentSrc = fragmentSrc.replace(/%count%/gi, maxTextures);\n    fragmentSrc = fragmentSrc.replace(/%forloop%/gi, generateSampleSrc(maxTextures));\n\n    const shader = new Shader(gl, vertexSrc, fragmentSrc);\n\n    const sampleValues = [];\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        sampleValues[i] = i;\n    }\n\n    shader.bind();\n    shader.uniforms.uSamplers = sampleValues;\n\n    return shader;\n}\n\nfunction generateSampleSrc(maxTextures)\n{\n    let src = '';\n\n    src += '\\n';\n    src += '\\n';\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxTextures - 1)\n        {\n            src += `if(textureId == ${i}.0)`;\n        }\n\n        src += '\\n{';\n        src += `\\n\\tcolor = texture2D(uSamplers[${i}], vTextureCoord);`;\n        src += '\\n}';\n    }\n\n    src += '\\n';\n    src += '\\n';\n\n    return src;\n}\n"]}},"hash":"e419603cd6050b746f1ec7dcbc9af68c","cacheData":{"env":{}}}