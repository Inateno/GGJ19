{"id":"../node_modules/pixi.js/lib/extras/getGlobalPosition.js","dependencies":[{"name":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/extras/getGlobalPosition.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/antoine/Documents/perso/gamedev/GGJ19/package.json","includedInParent":true,"mtime":1548542467768},{"name":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/package.json","includedInParent":true,"mtime":1548541995508},{"name":"../core","loc":{"line":3,"column":20},"parent":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/extras/getGlobalPosition.js","resolved":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/index.js"}],"generated":{"js":"'use strict';\n\nvar _core = require('../core');\n\nvar core = _interopRequireWildcard(_core);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n *\n * @method getGlobalPosition\n * @memberof PIXI.DisplayObject#\n * @param {Point} point - the point to write the global value to. If null a new point will be returned\n * @param {boolean} skipUpdate - setting to true will stop the transforms of the scene graph from\n *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n *  nice performance boost\n * @return {Point} The updated point\n */\ncore.DisplayObject.prototype.getGlobalPosition = function getGlobalPosition() {\n    var point = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new core.Point();\n    var skipUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (this.parent) {\n        this.parent.toGlobal(this.position, point, skipUpdate);\n    } else {\n        point.x = this.position.x;\n        point.y = this.position.y;\n    }\n\n    return point;\n};\n","map":{"version":3,"sources":["../../src/extras/getGlobalPosition.js"],"names":["core","DisplayObject","prototype","getGlobalPosition","point","Point","skipUpdate","parent","toGlobal","position","x","y"],"mappings":";;AAAA;;IAAYA,I;;;;AAEZ;;;;;;;;;;;AAWAA,KAAKC,aAAL,CAAmBC,SAAnB,CAA6BC,iBAA7B,GAAiD,SAASA,iBAAT,GACjD;AAAA,QAD4EC,KAC5E,uEADoF,IAAIJ,KAAKK,KAAT,EACpF;AAAA,QADsGC,UACtG,uEADmH,KACnH;;AACI,QAAI,KAAKC,MAAT,EACA;AACI,aAAKA,MAAL,CAAYC,QAAZ,CAAqB,KAAKC,QAA1B,EAAoCL,KAApC,EAA2CE,UAA3C;AACH,KAHD,MAKA;AACIF,cAAMM,CAAN,GAAU,KAAKD,QAAL,CAAcC,CAAxB;AACAN,cAAMO,CAAN,GAAU,KAAKF,QAAL,CAAcE,CAAxB;AACH;;AAED,WAAOP,KAAP;AACH,CAbD","file":"getGlobalPosition.js","sourcesContent":["import * as core from '../core';\n\n/**\n * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n *\n * @method getGlobalPosition\n * @memberof PIXI.DisplayObject#\n * @param {Point} point - the point to write the global value to. If null a new point will be returned\n * @param {boolean} skipUpdate - setting to true will stop the transforms of the scene graph from\n *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n *  nice performance boost\n * @return {Point} The updated point\n */\ncore.DisplayObject.prototype.getGlobalPosition = function getGlobalPosition(point = new core.Point(), skipUpdate = false)\n{\n    if (this.parent)\n    {\n        this.parent.toGlobal(this.position, point, skipUpdate);\n    }\n    else\n    {\n        point.x = this.position.x;\n        point.y = this.position.y;\n    }\n\n    return point;\n};\n"]}},"hash":"9e48bcb6d0a753bd10087d543f694866","cacheData":{"env":{}}}