{"id":"../node_modules/@dreamirl/dreamengine/node_modules/pixi.js/lib/core/graphics/webgl/utils/buildCircle.js","dependencies":[{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\graphics\\webgl\\utils\\buildCircle.js.map","includedInParent":true,"mtime":1505920119000},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\package.json","includedInParent":true,"mtime":1548525594111},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\package.json","includedInParent":true,"mtime":1548517163228},{"name":"./buildLine","loc":{"line":6,"column":25},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\graphics\\webgl\\utils\\buildCircle.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\graphics\\webgl\\utils\\buildLine.js"},{"name":"../../../const","loc":{"line":10,"column":21},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\graphics\\webgl\\utils\\buildCircle.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\const.js"},{"name":"../../../utils","loc":{"line":12,"column":21},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\graphics\\webgl\\utils\\buildCircle.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\utils\\index.js"}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\nexports.default = buildCircle;\n\nvar _buildLine = require('./buildLine');\n\nvar _buildLine2 = _interopRequireDefault(_buildLine);\n\nvar _const = require('../../../const');\n\nvar _utils = require('../../../utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Builds a circle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object to draw\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nfunction buildCircle(graphicsData, webGLData, webGLDataNativeLines) {\n    // need to convert points to a nice regular data\n    var circleData = graphicsData.shape;\n    var x = circleData.x;\n    var y = circleData.y;\n    var width = void 0;\n    var height = void 0;\n\n    // TODO - bit hacky??\n    if (graphicsData.type === _const.SHAPES.CIRC) {\n        width = circleData.radius;\n        height = circleData.radius;\n    } else {\n        width = circleData.width;\n        height = circleData.height;\n    }\n\n    if (width === 0 || height === 0) {\n        return;\n    }\n\n    var totalSegs = Math.floor(30 * Math.sqrt(circleData.radius)) || Math.floor(15 * Math.sqrt(circleData.width + circleData.height));\n\n    var seg = Math.PI * 2 / totalSegs;\n\n    if (graphicsData.fill) {\n        var color = (0, _utils.hex2rgb)(graphicsData.fillColor);\n        var alpha = graphicsData.fillAlpha;\n\n        var r = color[0] * alpha;\n        var g = color[1] * alpha;\n        var b = color[2] * alpha;\n\n        var verts = webGLData.points;\n        var indices = webGLData.indices;\n\n        var vecPos = verts.length / 6;\n\n        indices.push(vecPos);\n\n        for (var i = 0; i < totalSegs + 1; i++) {\n            verts.push(x, y, r, g, b, alpha);\n\n            verts.push(x + Math.sin(seg * i) * width, y + Math.cos(seg * i) * height, r, g, b, alpha);\n\n            indices.push(vecPos++, vecPos++);\n        }\n\n        indices.push(vecPos - 1);\n    }\n\n    if (graphicsData.lineWidth) {\n        var tempPoints = graphicsData.points;\n\n        graphicsData.points = [];\n\n        for (var _i = 0; _i < totalSegs + 1; _i++) {\n            graphicsData.points.push(x + Math.sin(seg * _i) * width, y + Math.cos(seg * _i) * height);\n        }\n\n        (0, _buildLine2.default)(graphicsData, webGLData, webGLDataNativeLines);\n\n        graphicsData.points = tempPoints;\n    }\n}\n","map":{"version":3,"sources":["../../../../../src/core/graphics/webgl/utils/buildCircle.js"],"names":["buildCircle","graphicsData","webGLData","webGLDataNativeLines","circleData","shape","x","y","width","height","type","CIRC","radius","totalSegs","Math","floor","sqrt","seg","PI","fill","color","fillColor","alpha","fillAlpha","r","g","b","verts","points","indices","vecPos","length","push","i","sin","cos","lineWidth","tempPoints"],"mappings":";;;kBAewBA,W;;AAfxB;;;;AACA;;AACA;;;;AAEA;;;;;;;;;;;AAWe,SAASA,WAAT,CAAqBC,YAArB,EAAmCC,SAAnC,EAA8CC,oBAA9C,EACf;AACI;AACA,QAAMC,aAAaH,aAAaI,KAAhC;AACA,QAAMC,IAAIF,WAAWE,CAArB;AACA,QAAMC,IAAIH,WAAWG,CAArB;AACA,QAAIC,cAAJ;AACA,QAAIC,eAAJ;;AAEA;AACA,QAAIR,aAAaS,IAAb,KAAsB,cAAOC,IAAjC,EACA;AACIH,gBAAQJ,WAAWQ,MAAnB;AACAH,iBAASL,WAAWQ,MAApB;AACH,KAJD,MAMA;AACIJ,gBAAQJ,WAAWI,KAAnB;AACAC,iBAASL,WAAWK,MAApB;AACH;;AAED,QAAID,UAAU,CAAV,IAAeC,WAAW,CAA9B,EACA;AACI;AACH;;AAED,QAAMI,YAAYC,KAAKC,KAAL,CAAW,KAAKD,KAAKE,IAAL,CAAUZ,WAAWQ,MAArB,CAAhB,KACXE,KAAKC,KAAL,CAAW,KAAKD,KAAKE,IAAL,CAAUZ,WAAWI,KAAX,GAAmBJ,WAAWK,MAAxC,CAAhB,CADP;;AAGA,QAAMQ,MAAOH,KAAKI,EAAL,GAAU,CAAX,GAAgBL,SAA5B;;AAEA,QAAIZ,aAAakB,IAAjB,EACA;AACI,YAAMC,QAAQ,oBAAQnB,aAAaoB,SAArB,CAAd;AACA,YAAMC,QAAQrB,aAAasB,SAA3B;;AAEA,YAAMC,IAAIJ,MAAM,CAAN,IAAWE,KAArB;AACA,YAAMG,IAAIL,MAAM,CAAN,IAAWE,KAArB;AACA,YAAMI,IAAIN,MAAM,CAAN,IAAWE,KAArB;;AAEA,YAAMK,QAAQzB,UAAU0B,MAAxB;AACA,YAAMC,UAAU3B,UAAU2B,OAA1B;;AAEA,YAAIC,SAASH,MAAMI,MAAN,GAAe,CAA5B;;AAEAF,gBAAQG,IAAR,CAAaF,MAAb;;AAEA,aAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAIpB,YAAY,CAAhC,EAAmCoB,GAAnC,EACA;AACIN,kBAAMK,IAAN,CAAW1B,CAAX,EAAcC,CAAd,EAAiBiB,CAAjB,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0BJ,KAA1B;;AAEAK,kBAAMK,IAAN,CACI1B,IAAKQ,KAAKoB,GAAL,CAASjB,MAAMgB,CAAf,IAAoBzB,KAD7B,EAEID,IAAKO,KAAKqB,GAAL,CAASlB,MAAMgB,CAAf,IAAoBxB,MAF7B,EAGIe,CAHJ,EAGOC,CAHP,EAGUC,CAHV,EAGaJ,KAHb;;AAMAO,oBAAQG,IAAR,CAAaF,QAAb,EAAuBA,QAAvB;AACH;;AAEDD,gBAAQG,IAAR,CAAaF,SAAS,CAAtB;AACH;;AAED,QAAI7B,aAAamC,SAAjB,EACA;AACI,YAAMC,aAAapC,aAAa2B,MAAhC;;AAEA3B,qBAAa2B,MAAb,GAAsB,EAAtB;;AAEA,aAAK,IAAIK,KAAI,CAAb,EAAgBA,KAAIpB,YAAY,CAAhC,EAAmCoB,IAAnC,EACA;AACIhC,yBAAa2B,MAAb,CAAoBI,IAApB,CACI1B,IAAKQ,KAAKoB,GAAL,CAASjB,MAAMgB,EAAf,IAAoBzB,KAD7B,EAEID,IAAKO,KAAKqB,GAAL,CAASlB,MAAMgB,EAAf,IAAoBxB,MAF7B;AAIH;;AAED,iCAAUR,YAAV,EAAwBC,SAAxB,EAAmCC,oBAAnC;;AAEAF,qBAAa2B,MAAb,GAAsBS,UAAtB;AACH;AACJ","file":"buildCircle.js","sourcesContent":["import buildLine from './buildLine';\nimport { SHAPES } from '../../../const';\nimport { hex2rgb } from '../../../utils';\n\n/**\n * Builds a circle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object to draw\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nexport default function buildCircle(graphicsData, webGLData, webGLDataNativeLines)\n{\n    // need to convert points to a nice regular data\n    const circleData = graphicsData.shape;\n    const x = circleData.x;\n    const y = circleData.y;\n    let width;\n    let height;\n\n    // TODO - bit hacky??\n    if (graphicsData.type === SHAPES.CIRC)\n    {\n        width = circleData.radius;\n        height = circleData.radius;\n    }\n    else\n    {\n        width = circleData.width;\n        height = circleData.height;\n    }\n\n    if (width === 0 || height === 0)\n    {\n        return;\n    }\n\n    const totalSegs = Math.floor(30 * Math.sqrt(circleData.radius))\n        || Math.floor(15 * Math.sqrt(circleData.width + circleData.height));\n\n    const seg = (Math.PI * 2) / totalSegs;\n\n    if (graphicsData.fill)\n    {\n        const color = hex2rgb(graphicsData.fillColor);\n        const alpha = graphicsData.fillAlpha;\n\n        const r = color[0] * alpha;\n        const g = color[1] * alpha;\n        const b = color[2] * alpha;\n\n        const verts = webGLData.points;\n        const indices = webGLData.indices;\n\n        let vecPos = verts.length / 6;\n\n        indices.push(vecPos);\n\n        for (let i = 0; i < totalSegs + 1; i++)\n        {\n            verts.push(x, y, r, g, b, alpha);\n\n            verts.push(\n                x + (Math.sin(seg * i) * width),\n                y + (Math.cos(seg * i) * height),\n                r, g, b, alpha\n            );\n\n            indices.push(vecPos++, vecPos++);\n        }\n\n        indices.push(vecPos - 1);\n    }\n\n    if (graphicsData.lineWidth)\n    {\n        const tempPoints = graphicsData.points;\n\n        graphicsData.points = [];\n\n        for (let i = 0; i < totalSegs + 1; i++)\n        {\n            graphicsData.points.push(\n                x + (Math.sin(seg * i) * width),\n                y + (Math.cos(seg * i) * height)\n            );\n        }\n\n        buildLine(graphicsData, webGLData, webGLDataNativeLines);\n\n        graphicsData.points = tempPoints;\n    }\n}\n"]}},"hash":"67a670adf37ea85f02be0308fa03cfbb","cacheData":{"env":{}}}