{"id":"../node_modules/pixi.js/lib/core/math/Point.js","dependencies":[{"name":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/math/Point.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/antoine/Documents/perso/gamedev/GGJ19/package.json","includedInParent":true,"mtime":1548542467768},{"name":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/package.json","includedInParent":true,"mtime":1548541995508}],"generated":{"js":"\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n *\n * @class\n * @memberof PIXI\n */\nvar Point = function () {\n  /**\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n   */\n  function Point() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, Point);\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.x = x;\n\n    /**\n     * @member {number}\n     * @default 0\n     */\n    this.y = y;\n  }\n\n  /**\n   * Creates a clone of this point\n   *\n   * @return {PIXI.Point} a copy of the point\n   */\n\n\n  Point.prototype.clone = function clone() {\n    return new Point(this.x, this.y);\n  };\n\n  /**\n   * Copies x and y from the given point\n   *\n   * @param {PIXI.Point} p - The point to copy.\n   */\n\n\n  Point.prototype.copy = function copy(p) {\n    this.set(p.x, p.y);\n  };\n\n  /**\n   * Returns true if the given point is equal to this point\n   *\n   * @param {PIXI.Point} p - The point to check\n   * @returns {boolean} Whether the given point equal to this point\n   */\n\n\n  Point.prototype.equals = function equals(p) {\n    return p.x === this.x && p.y === this.y;\n  };\n\n  /**\n   * Sets the point to a new x and y position.\n   * If y is omitted, both x and y will be set to x.\n   *\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n   */\n\n\n  Point.prototype.set = function set(x, y) {\n    this.x = x || 0;\n    this.y = y || (y !== 0 ? this.x : 0);\n  };\n\n  return Point;\n}();\n\nexports.default = Point;\n","map":{"version":3,"sources":["../../../src/core/math/Point.js"],"names":["Point","x","y","clone","copy","p","set","equals"],"mappings":";;;;;;AAAA;;;;;;;IAOqBA,K;AAEjB;;;;AAIA,mBACA;AAAA,QADYC,CACZ,uEADgB,CAChB;AAAA,QADmBC,CACnB,uEADuB,CACvB;;AAAA;;AACI;;;;AAIA,SAAKD,CAAL,GAASA,CAAT;;AAEA;;;;AAIA,SAAKC,CAAL,GAASA,CAAT;AACH;;AAED;;;;;;;kBAKAC,K,oBACA;AACI,WAAO,IAAIH,KAAJ,CAAU,KAAKC,CAAf,EAAkB,KAAKC,CAAvB,CAAP;AACH,G;;AAED;;;;;;;kBAKAE,I,iBAAKC,C,EACL;AACI,SAAKC,GAAL,CAASD,EAAEJ,CAAX,EAAcI,EAAEH,CAAhB;AACH,G;;AAED;;;;;;;;kBAMAK,M,mBAAOF,C,EACP;AACI,WAAQA,EAAEJ,CAAF,KAAQ,KAAKA,CAAd,IAAqBI,EAAEH,CAAF,KAAQ,KAAKA,CAAzC;AACH,G;;AAED;;;;;;;;;kBAOAI,G,gBAAIL,C,EAAGC,C,EACP;AACI,SAAKD,CAAL,GAASA,KAAK,CAAd;AACA,SAAKC,CAAL,GAASA,MAAOA,MAAM,CAAP,GAAY,KAAKD,CAAjB,GAAqB,CAA3B,CAAT;AACH,G;;;;;kBA/DgBD,K","file":"Point.js","sourcesContent":["/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n *\n * @class\n * @memberof PIXI\n */\nexport default class Point\n{\n    /**\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(x = 0, y = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = x;\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = y;\n    }\n\n    /**\n     * Creates a clone of this point\n     *\n     * @return {PIXI.Point} a copy of the point\n     */\n    clone()\n    {\n        return new Point(this.x, this.y);\n    }\n\n    /**\n     * Copies x and y from the given point\n     *\n     * @param {PIXI.Point} p - The point to copy.\n     */\n    copy(p)\n    {\n        this.set(p.x, p.y);\n    }\n\n    /**\n     * Returns true if the given point is equal to this point\n     *\n     * @param {PIXI.Point} p - The point to check\n     * @returns {boolean} Whether the given point equal to this point\n     */\n    equals(p)\n    {\n        return (p.x === this.x) && (p.y === this.y);\n    }\n\n    /**\n     * Sets the point to a new x and y position.\n     * If y is omitted, both x and y will be set to x.\n     *\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    set(x, y)\n    {\n        this.x = x || 0;\n        this.y = y || ((y !== 0) ? this.x : 0);\n    }\n\n}\n"]}},"hash":"99e9243aec9e3bffbcfa7f802d3673e7","cacheData":{"env":{}}}