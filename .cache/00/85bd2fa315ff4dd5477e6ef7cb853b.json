{"id":"../node_modules/pixi.js/lib/core/display/TransformStatic.js","dependencies":[{"name":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/display/TransformStatic.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/antoine/Documents/perso/gamedev/GGJ19/package.json","includedInParent":true,"mtime":1548542467768},{"name":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/package.json","includedInParent":true,"mtime":1548541995508},{"name":"../math","loc":{"line":7,"column":20},"parent":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/display/TransformStatic.js","resolved":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/math/index.js"},{"name":"./TransformBase","loc":{"line":9,"column":30},"parent":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/display/TransformStatic.js","resolved":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/display/TransformBase.js"}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _math = require('../math');\n\nvar _TransformBase2 = require('./TransformBase');\n\nvar _TransformBase3 = _interopRequireDefault(_TransformBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Transform that takes care about its versions\n *\n * @class\n * @extends PIXI.TransformBase\n * @memberof PIXI\n */\nvar TransformStatic = function (_TransformBase) {\n    _inherits(TransformStatic, _TransformBase);\n\n    /**\n     *\n     */\n    function TransformStatic() {\n        _classCallCheck(this, TransformStatic);\n\n        /**\n        * The coordinate of the object relative to the local coordinates of the parent.\n        *\n        * @member {PIXI.ObservablePoint}\n        */\n        var _this = _possibleConstructorReturn(this, _TransformBase.call(this));\n\n        _this.position = new _math.ObservablePoint(_this.onChange, _this, 0, 0);\n\n        /**\n         * The scale factor of the object.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        _this.scale = new _math.ObservablePoint(_this.onChange, _this, 1, 1);\n\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        _this.pivot = new _math.ObservablePoint(_this.onChange, _this, 0, 0);\n\n        /**\n         * The skew amount, on the x and y axis.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        _this.skew = new _math.ObservablePoint(_this.updateSkew, _this, 0, 0);\n\n        _this._rotation = 0;\n\n        _this._cx = 1; // cos rotation + skewY;\n        _this._sx = 0; // sin rotation + skewY;\n        _this._cy = 0; // cos rotation + Math.PI/2 - skewX;\n        _this._sy = 1; // sin rotation + Math.PI/2 - skewX;\n\n        _this._localID = 0;\n        _this._currentLocalID = 0;\n        return _this;\n    }\n\n    /**\n     * Called when a value changes.\n     *\n     * @private\n     */\n\n\n    TransformStatic.prototype.onChange = function onChange() {\n        this._localID++;\n    };\n\n    /**\n     * Called when skew or rotation changes\n     *\n     * @private\n     */\n\n\n    TransformStatic.prototype.updateSkew = function updateSkew() {\n        this._cx = Math.cos(this._rotation + this.skew._y);\n        this._sx = Math.sin(this._rotation + this.skew._y);\n        this._cy = -Math.sin(this._rotation - this.skew._x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew._x); // sin, added PI/2\n\n        this._localID++;\n    };\n\n    /**\n     * Updates only local matrix\n     */\n\n\n    TransformStatic.prototype.updateLocalTransform = function updateLocalTransform() {\n        var lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID) {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale._x;\n            lt.b = this._sx * this.scale._x;\n            lt.c = this._cy * this.scale._y;\n            lt.d = this._sy * this.scale._y;\n\n            lt.tx = this.position._x - (this.pivot._x * lt.a + this.pivot._y * lt.c);\n            lt.ty = this.position._y - (this.pivot._x * lt.b + this.pivot._y * lt.d);\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n    };\n\n    /**\n     * Updates the values of the object and applies the parent's transform.\n     *\n     * @param {PIXI.Transform} parentTransform - The transform of the parent of this object\n     */\n\n\n    TransformStatic.prototype.updateTransform = function updateTransform(parentTransform) {\n        var lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID) {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale._x;\n            lt.b = this._sx * this.scale._x;\n            lt.c = this._cy * this.scale._y;\n            lt.d = this._sy * this.scale._y;\n\n            lt.tx = this.position._x - (this.pivot._x * lt.a + this.pivot._y * lt.c);\n            lt.ty = this.position._y - (this.pivot._x * lt.b + this.pivot._y * lt.d);\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n\n        if (this._parentID !== parentTransform._worldID) {\n            // concat the parent matrix with the objects transform.\n            var pt = parentTransform.worldTransform;\n            var wt = this.worldTransform;\n\n            wt.a = lt.a * pt.a + lt.b * pt.c;\n            wt.b = lt.a * pt.b + lt.b * pt.d;\n            wt.c = lt.c * pt.a + lt.d * pt.c;\n            wt.d = lt.c * pt.b + lt.d * pt.d;\n            wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n            wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n\n            this._parentID = parentTransform._worldID;\n\n            // update the id of the transform..\n            this._worldID++;\n        }\n    };\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to decompose\n     */\n\n\n    TransformStatic.prototype.setFromMatrix = function setFromMatrix(matrix) {\n        matrix.decompose(this);\n        this._localID++;\n    };\n\n    /**\n     * The rotation of the object in radians.\n     *\n     * @member {number}\n     */\n\n\n    _createClass(TransformStatic, [{\n        key: 'rotation',\n        get: function get() {\n            return this._rotation;\n        },\n        set: function set(value) // eslint-disable-line require-jsdoc\n        {\n            if (this._rotation !== value) {\n                this._rotation = value;\n                this.updateSkew();\n            }\n        }\n    }]);\n\n    return TransformStatic;\n}(_TransformBase3.default);\n\nexports.default = TransformStatic;\n","map":{"version":3,"sources":["../../../src/core/display/TransformStatic.js"],"names":["TransformStatic","position","onChange","scale","pivot","skew","updateSkew","_rotation","_cx","_sx","_cy","_sy","_localID","_currentLocalID","Math","cos","_y","sin","_x","updateLocalTransform","lt","localTransform","a","b","c","d","tx","ty","_parentID","updateTransform","parentTransform","_worldID","pt","worldTransform","wt","setFromMatrix","matrix","decompose","value"],"mappings":"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","file":"TransformStatic.js","sourcesContent":["import { ObservablePoint } from '../math';\nimport TransformBase from './TransformBase';\n\n/**\n * Transform that takes care about its versions\n *\n * @class\n * @extends PIXI.TransformBase\n * @memberof PIXI\n */\nexport default class TransformStatic extends TransformBase\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        super();\n\n         /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n\n        /**\n         * The scale factor of the object.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n\n        /**\n         * The pivot point of the displayObject that it rotates around.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n\n        /**\n         * The skew amount, on the x and y axis.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        this._rotation = 0;\n\n        this._cx = 1; // cos rotation + skewY;\n        this._sx = 0; // sin rotation + skewY;\n        this._cy = 0; // cos rotation + Math.PI/2 - skewX;\n        this._sy = 1; // sin rotation + Math.PI/2 - skewX;\n\n        this._localID = 0;\n        this._currentLocalID = 0;\n    }\n\n    /**\n     * Called when a value changes.\n     *\n     * @private\n     */\n    onChange()\n    {\n        this._localID ++;\n    }\n\n    /**\n     * Called when skew or rotation changes\n     *\n     * @private\n     */\n    updateSkew()\n    {\n        this._cx = Math.cos(this._rotation + this.skew._y);\n        this._sx = Math.sin(this._rotation + this.skew._y);\n        this._cy = -Math.sin(this._rotation - this.skew._x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew._x); // sin, added PI/2\n\n        this._localID ++;\n    }\n\n    /**\n     * Updates only local matrix\n     */\n    updateLocalTransform()\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale._x;\n            lt.b = this._sx * this.scale._x;\n            lt.c = this._cy * this.scale._y;\n            lt.d = this._sy * this.scale._y;\n\n            lt.tx = this.position._x - ((this.pivot._x * lt.a) + (this.pivot._y * lt.c));\n            lt.ty = this.position._y - ((this.pivot._x * lt.b) + (this.pivot._y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n    }\n\n    /**\n     * Updates the values of the object and applies the parent's transform.\n     *\n     * @param {PIXI.Transform} parentTransform - The transform of the parent of this object\n     */\n    updateTransform(parentTransform)\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale._x;\n            lt.b = this._sx * this.scale._x;\n            lt.c = this._cy * this.scale._y;\n            lt.d = this._sy * this.scale._y;\n\n            lt.tx = this.position._x - ((this.pivot._x * lt.a) + (this.pivot._y * lt.c));\n            lt.ty = this.position._y - ((this.pivot._x * lt.b) + (this.pivot._y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n\n        if (this._parentID !== parentTransform._worldID)\n        {\n            // concat the parent matrix with the objects transform.\n            const pt = parentTransform.worldTransform;\n            const wt = this.worldTransform;\n\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n            this._parentID = parentTransform._worldID;\n\n            // update the id of the transform..\n            this._worldID ++;\n        }\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix)\n    {\n        matrix.decompose(this);\n        this._localID ++;\n    }\n\n    /**\n     * The rotation of the object in radians.\n     *\n     * @member {number}\n     */\n    get rotation()\n    {\n        return this._rotation;\n    }\n\n    set rotation(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this.updateSkew();\n        }\n    }\n}\n"]}},"hash":"9a9b69ae60c7f486a154d42489fd1c4f","cacheData":{"env":{}}}