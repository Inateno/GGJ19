{"id":"../node_modules/@dreamirl/dreamengine/node_modules/pixi.js/lib/core/math/ObservablePoint.js","dependencies":[{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\math\\ObservablePoint.js.map","includedInParent":true,"mtime":1505920119000},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\package.json","includedInParent":true,"mtime":1548525594111},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\package.json","includedInParent":true,"mtime":1548517163228}],"generated":{"js":"\"use strict\";\n\nexports.__esModule = true;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n * An observable point is a point that triggers a callback when the point's position is changed.\n *\n * @class\n * @memberof PIXI\n */\nvar ObservablePoint = function () {\n    /**\n     * @param {Function} cb - callback when changed\n     * @param {object} scope - owner of callback\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    function ObservablePoint(cb, scope) {\n        var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n        _classCallCheck(this, ObservablePoint);\n\n        this._x = x;\n        this._y = y;\n\n        this.cb = cb;\n        this.scope = scope;\n    }\n\n    /**\n     * Sets the point to a new x and y position.\n     * If y is omitted, both x and y will be set to x.\n     *\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n\n\n    ObservablePoint.prototype.set = function set(x, y) {\n        var _x = x || 0;\n        var _y = y || (y !== 0 ? _x : 0);\n\n        if (this._x !== _x || this._y !== _y) {\n            this._x = _x;\n            this._y = _y;\n            this.cb.call(this.scope);\n        }\n    };\n\n    /**\n     * Copies the data from another point\n     *\n     * @param {PIXI.Point|PIXI.ObservablePoint} point - point to copy from\n     */\n\n\n    ObservablePoint.prototype.copy = function copy(point) {\n        if (this._x !== point.x || this._y !== point.y) {\n            this._x = point.x;\n            this._y = point.y;\n            this.cb.call(this.scope);\n        }\n    };\n\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     *\n     * @member {number}\n     */\n\n\n    _createClass(ObservablePoint, [{\n        key: \"x\",\n        get: function get() {\n            return this._x;\n        },\n        set: function set(value) // eslint-disable-line require-jsdoc\n        {\n            if (this._x !== value) {\n                this._x = value;\n                this.cb.call(this.scope);\n            }\n        }\n\n        /**\n         * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n         *\n         * @member {number}\n         */\n\n    }, {\n        key: \"y\",\n        get: function get() {\n            return this._y;\n        },\n        set: function set(value) // eslint-disable-line require-jsdoc\n        {\n            if (this._y !== value) {\n                this._y = value;\n                this.cb.call(this.scope);\n            }\n        }\n    }]);\n\n    return ObservablePoint;\n}();\n\nexports.default = ObservablePoint;\n","map":{"version":3,"sources":["../../../src/core/math/ObservablePoint.js"],"names":["ObservablePoint","cb","scope","x","y","_x","_y","set","call","copy","point","value"],"mappings":";;;;;;;;AAAA;;;;;;;;IAQqBA,e;AAEjB;;;;;;AAMA,6BAAYC,EAAZ,EAAgBC,KAAhB,EACA;AAAA,YADuBC,CACvB,uEAD2B,CAC3B;AAAA,YAD8BC,CAC9B,uEADkC,CAClC;;AAAA;;AACI,aAAKC,EAAL,GAAUF,CAAV;AACA,aAAKG,EAAL,GAAUF,CAAV;;AAEA,aAAKH,EAAL,GAAUA,EAAV;AACA,aAAKC,KAAL,GAAaA,KAAb;AACH;;AAED;;;;;;;;;8BAOAK,G,gBAAIJ,C,EAAGC,C,EACP;AACI,YAAMC,KAAKF,KAAK,CAAhB;AACA,YAAMG,KAAKF,MAAOA,MAAM,CAAP,GAAYC,EAAZ,GAAiB,CAAvB,CAAX;;AAEA,YAAI,KAAKA,EAAL,KAAYA,EAAZ,IAAkB,KAAKC,EAAL,KAAYA,EAAlC,EACA;AACI,iBAAKD,EAAL,GAAUA,EAAV;AACA,iBAAKC,EAAL,GAAUA,EAAV;AACA,iBAAKL,EAAL,CAAQO,IAAR,CAAa,KAAKN,KAAlB;AACH;AACJ,K;;AAED;;;;;;;8BAKAO,I,iBAAKC,K,EACL;AACI,YAAI,KAAKL,EAAL,KAAYK,MAAMP,CAAlB,IAAuB,KAAKG,EAAL,KAAYI,MAAMN,CAA7C,EACA;AACI,iBAAKC,EAAL,GAAUK,MAAMP,CAAhB;AACA,iBAAKG,EAAL,GAAUI,MAAMN,CAAhB;AACA,iBAAKH,EAAL,CAAQO,IAAR,CAAa,KAAKN,KAAlB;AACH;AACJ,K;;AAED;;;;;;;;;4BAMA;AACI,mBAAO,KAAKG,EAAZ;AACH,S;0BAEKM,K,EAAO;AACb;AACI,gBAAI,KAAKN,EAAL,KAAYM,KAAhB,EACA;AACI,qBAAKN,EAAL,GAAUM,KAAV;AACA,qBAAKV,EAAL,CAAQO,IAAR,CAAa,KAAKN,KAAlB;AACH;AACJ;;AAED;;;;;;;;4BAMA;AACI,mBAAO,KAAKI,EAAZ;AACH,S;0BAEKK,K,EAAO;AACb;AACI,gBAAI,KAAKL,EAAL,KAAYK,KAAhB,EACA;AACI,qBAAKL,EAAL,GAAUK,KAAV;AACA,qBAAKV,EAAL,CAAQO,IAAR,CAAa,KAAKN,KAAlB;AACH;AACJ;;;;;;kBAxFgBF,e","file":"ObservablePoint.js","sourcesContent":["/**\n * The Point object represents a location in a two-dimensional coordinate system, where x represents\n * the horizontal axis and y represents the vertical axis.\n * An observable point is a point that triggers a callback when the point's position is changed.\n *\n * @class\n * @memberof PIXI\n */\nexport default class ObservablePoint\n{\n    /**\n     * @param {Function} cb - callback when changed\n     * @param {object} scope - owner of callback\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(cb, scope, x = 0, y = 0)\n    {\n        this._x = x;\n        this._y = y;\n\n        this.cb = cb;\n        this.scope = scope;\n    }\n\n    /**\n     * Sets the point to a new x and y position.\n     * If y is omitted, both x and y will be set to x.\n     *\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    set(x, y)\n    {\n        const _x = x || 0;\n        const _y = y || ((y !== 0) ? _x : 0);\n\n        if (this._x !== _x || this._y !== _y)\n        {\n            this._x = _x;\n            this._y = _y;\n            this.cb.call(this.scope);\n        }\n    }\n\n    /**\n     * Copies the data from another point\n     *\n     * @param {PIXI.Point|PIXI.ObservablePoint} point - point to copy from\n     */\n    copy(point)\n    {\n        if (this._x !== point.x || this._y !== point.y)\n        {\n            this._x = point.x;\n            this._y = point.y;\n            this.cb.call(this.scope);\n        }\n    }\n\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     *\n     * @member {number}\n     */\n    get x()\n    {\n        return this._x;\n    }\n\n    set x(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this.cb.call(this.scope);\n        }\n    }\n\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     *\n     * @member {number}\n     */\n    get y()\n    {\n        return this._y;\n    }\n\n    set y(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this.cb.call(this.scope);\n        }\n    }\n}\n"]}},"hash":"1b70167b9c0d4d4b8be5457ee1d3ab46","cacheData":{"env":{}}}