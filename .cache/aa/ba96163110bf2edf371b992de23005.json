{"id":"../node_modules/@dreamirl/dreamengine/node_modules/pixi.js/lib/prepare/canvas/CanvasPrepare.js","dependencies":[{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\prepare\\canvas\\CanvasPrepare.js.map","includedInParent":true,"mtime":1505920125000},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\package.json","includedInParent":true,"mtime":1548525594111},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\package.json","includedInParent":true,"mtime":1548517163228},{"name":"../../core","loc":{"line":5,"column":20},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\prepare\\canvas\\CanvasPrepare.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\index.js"},{"name":"../BasePrepare","loc":{"line":9,"column":28},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\prepare\\canvas\\CanvasPrepare.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\prepare\\BasePrepare.js"}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _core = require('../../core');\n\nvar core = _interopRequireWildcard(_core);\n\nvar _BasePrepare2 = require('../BasePrepare');\n\nvar _BasePrepare3 = _interopRequireDefault(_BasePrepare2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar CANVAS_START_SIZE = 16;\n\n/**\n * The prepare manager provides functionality to upload content to the GPU\n * This cannot be done directly for Canvas like in WebGL, but the effect can be achieved by drawing\n * textures to an offline canvas.\n * This draw call will force the texture to be moved onto the GPU.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.prepare\n *\n * @class\n * @extends PIXI.prepare.BasePrepare\n * @memberof PIXI.prepare\n */\n\nvar CanvasPrepare = function (_BasePrepare) {\n    _inherits(CanvasPrepare, _BasePrepare);\n\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n     */\n    function CanvasPrepare(renderer) {\n        _classCallCheck(this, CanvasPrepare);\n\n        var _this = _possibleConstructorReturn(this, _BasePrepare.call(this, renderer));\n\n        _this.uploadHookHelper = _this;\n\n        /**\n        * An offline canvas to render textures to\n        * @type {HTMLCanvasElement}\n        * @private\n        */\n        _this.canvas = document.createElement('canvas');\n        _this.canvas.width = CANVAS_START_SIZE;\n        _this.canvas.height = CANVAS_START_SIZE;\n\n        /**\n         * The context to the canvas\n        * @type {CanvasRenderingContext2D}\n        * @private\n        */\n        _this.ctx = _this.canvas.getContext('2d');\n\n        // Add textures to upload\n        _this.registerUploadHook(uploadBaseTextures);\n        return _this;\n    }\n\n    /**\n     * Destroys the plugin, don't use after this.\n     *\n     */\n\n\n    CanvasPrepare.prototype.destroy = function destroy() {\n        _BasePrepare.prototype.destroy.call(this);\n        this.ctx = null;\n        this.canvas = null;\n    };\n\n    return CanvasPrepare;\n}(_BasePrepare3.default);\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {*} prepare - Instance of CanvasPrepare\n * @param {*} item - Item to check\n * @return {boolean} If item was uploaded.\n */\n\n\nexports.default = CanvasPrepare;\nfunction uploadBaseTextures(prepare, item) {\n    if (item instanceof core.BaseTexture) {\n        var image = item.source;\n\n        // Sometimes images (like atlas images) report a size of zero, causing errors on windows phone.\n        // So if the width or height is equal to zero then use the canvas size\n        // Otherwise use whatever is smaller, the image dimensions or the canvas dimensions.\n        var imageWidth = image.width === 0 ? prepare.canvas.width : Math.min(prepare.canvas.width, image.width);\n        var imageHeight = image.height === 0 ? prepare.canvas.height : Math.min(prepare.canvas.height, image.height);\n\n        // Only a small subsections is required to be drawn to have the whole texture uploaded to the GPU\n        // A smaller draw can be faster.\n        prepare.ctx.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, prepare.canvas.width, prepare.canvas.height);\n\n        return true;\n    }\n\n    return false;\n}\n\ncore.CanvasRenderer.registerPlugin('prepare', CanvasPrepare);\n","map":{"version":3,"sources":["../../../src/prepare/canvas/CanvasPrepare.js"],"names":["core","CANVAS_START_SIZE","CanvasPrepare","renderer","uploadHookHelper","canvas","document","createElement","width","height","ctx","getContext","registerUploadHook","uploadBaseTextures","destroy","prepare","item","BaseTexture","image","source","imageWidth","Math","min","imageHeight","drawImage","CanvasRenderer","registerPlugin"],"mappings":";;;;AAAA;;IAAYA,I;;AACZ;;;;;;;;;;;;;;AAEA,IAAMC,oBAAoB,EAA1B;;AAEA;;;;;;;;;;;;;IAYqBC,a;;;AAEjB;;;AAGA,2BAAYC,QAAZ,EACA;AAAA;;AAAA,qDACI,wBAAMA,QAAN,CADJ;;AAGI,cAAKC,gBAAL;;AAEA;;;;;AAKA,cAAKC,MAAL,GAAcC,SAASC,aAAT,CAAuB,QAAvB,CAAd;AACA,cAAKF,MAAL,CAAYG,KAAZ,GAAoBP,iBAApB;AACA,cAAKI,MAAL,CAAYI,MAAZ,GAAqBR,iBAArB;;AAEA;;;;;AAKA,cAAKS,GAAL,GAAW,MAAKL,MAAL,CAAYM,UAAZ,CAAuB,IAAvB,CAAX;;AAEA;AACA,cAAKC,kBAAL,CAAwBC,kBAAxB;AAtBJ;AAuBC;;AAED;;;;;;4BAIAC,O,sBACA;AACI,+BAAMA,OAAN;AACA,aAAKJ,GAAL,GAAW,IAAX;AACA,aAAKL,MAAL,GAAc,IAAd;AACH,K;;;;;AAIL;;;;;;;;;;kBA5CqBH,a;AAoDrB,SAASW,kBAAT,CAA4BE,OAA5B,EAAqCC,IAArC,EACA;AACI,QAAIA,gBAAgBhB,KAAKiB,WAAzB,EACA;AACI,YAAMC,QAAQF,KAAKG,MAAnB;;AAEA;AACA;AACA;AACA,YAAMC,aAAaF,MAAMV,KAAN,KAAgB,CAAhB,GAAoBO,QAAQV,MAAR,CAAeG,KAAnC,GAA2Ca,KAAKC,GAAL,CAASP,QAAQV,MAAR,CAAeG,KAAxB,EAA+BU,MAAMV,KAArC,CAA9D;AACA,YAAMe,cAAcL,MAAMT,MAAN,KAAiB,CAAjB,GAAqBM,QAAQV,MAAR,CAAeI,MAApC,GAA6CY,KAAKC,GAAL,CAASP,QAAQV,MAAR,CAAeI,MAAxB,EAAgCS,MAAMT,MAAtC,CAAjE;;AAEA;AACA;AACAM,gBAAQL,GAAR,CAAYc,SAAZ,CAAsBN,KAAtB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmCE,UAAnC,EAA+CG,WAA/C,EAA4D,CAA5D,EAA+D,CAA/D,EAAkER,QAAQV,MAAR,CAAeG,KAAjF,EAAwFO,QAAQV,MAAR,CAAeI,MAAvG;;AAEA,eAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAEDT,KAAKyB,cAAL,CAAoBC,cAApB,CAAmC,SAAnC,EAA8CxB,aAA9C","file":"CanvasPrepare.js","sourcesContent":["import * as core from '../../core';\nimport BasePrepare from '../BasePrepare';\n\nconst CANVAS_START_SIZE = 16;\n\n/**\n * The prepare manager provides functionality to upload content to the GPU\n * This cannot be done directly for Canvas like in WebGL, but the effect can be achieved by drawing\n * textures to an offline canvas.\n * This draw call will force the texture to be moved onto the GPU.\n *\n * An instance of this class is automatically created by default, and can be found at renderer.plugins.prepare\n *\n * @class\n * @extends PIXI.prepare.BasePrepare\n * @memberof PIXI.prepare\n */\nexport default class CanvasPrepare extends BasePrepare\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this.uploadHookHelper = this;\n\n        /**\n        * An offline canvas to render textures to\n        * @type {HTMLCanvasElement}\n        * @private\n        */\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = CANVAS_START_SIZE;\n        this.canvas.height = CANVAS_START_SIZE;\n\n        /**\n         * The context to the canvas\n        * @type {CanvasRenderingContext2D}\n        * @private\n        */\n        this.ctx = this.canvas.getContext('2d');\n\n        // Add textures to upload\n        this.registerUploadHook(uploadBaseTextures);\n    }\n\n    /**\n     * Destroys the plugin, don't use after this.\n     *\n     */\n    destroy()\n    {\n        super.destroy();\n        this.ctx = null;\n        this.canvas = null;\n    }\n\n}\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param {*} prepare - Instance of CanvasPrepare\n * @param {*} item - Item to check\n * @return {boolean} If item was uploaded.\n */\nfunction uploadBaseTextures(prepare, item)\n{\n    if (item instanceof core.BaseTexture)\n    {\n        const image = item.source;\n\n        // Sometimes images (like atlas images) report a size of zero, causing errors on windows phone.\n        // So if the width or height is equal to zero then use the canvas size\n        // Otherwise use whatever is smaller, the image dimensions or the canvas dimensions.\n        const imageWidth = image.width === 0 ? prepare.canvas.width : Math.min(prepare.canvas.width, image.width);\n        const imageHeight = image.height === 0 ? prepare.canvas.height : Math.min(prepare.canvas.height, image.height);\n\n        // Only a small subsections is required to be drawn to have the whole texture uploaded to the GPU\n        // A smaller draw can be faster.\n        prepare.ctx.drawImage(image, 0, 0, imageWidth, imageHeight, 0, 0, prepare.canvas.width, prepare.canvas.height);\n\n        return true;\n    }\n\n    return false;\n}\n\ncore.CanvasRenderer.registerPlugin('prepare', CanvasPrepare);\n"]}},"hash":"01bd759bced69b6855e6377216abd57d","cacheData":{"env":{}}}