{"id":"../node_modules/@dreamirl/dreamengine/node_modules/pixi.js/lib/core/renderers/webgl/filters/extractUniformsFromSrc.js","dependencies":[{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\renderers\\webgl\\filters\\extractUniformsFromSrc.js.map","includedInParent":true,"mtime":1505920120000},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\package.json","includedInParent":true,"mtime":1548525594111},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\package.json","includedInParent":true,"mtime":1548517163228},{"name":"pixi-gl-core","loc":{"line":6,"column":26},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\renderers\\webgl\\filters\\extractUniformsFromSrc.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi-gl-core\\src\\index.js"}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\nexports.default = extractUniformsFromSrc;\n\nvar _pixiGlCore = require('pixi-gl-core');\n\nvar _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar defaultValue = _pixiGlCore2.default.shader.defaultValue;\n\nfunction extractUniformsFromSrc(vertexSrc, fragmentSrc, mask) {\n    var vertUniforms = extractUniformsFromString(vertexSrc, mask);\n    var fragUniforms = extractUniformsFromString(fragmentSrc, mask);\n\n    return Object.assign(vertUniforms, fragUniforms);\n}\n\nfunction extractUniformsFromString(string) {\n    var maskRegex = new RegExp('^(projectionMatrix|uSampler|filterArea|filterClamp)$');\n\n    var uniforms = {};\n    var nameSplit = void 0;\n\n    // clean the lines a little - remove extra spaces / tabs etc\n    // then split along ';'\n    var lines = string.replace(/\\s+/g, ' ').split(/\\s*;\\s*/);\n\n    // loop through..\n    for (var i = 0; i < lines.length; i++) {\n        var line = lines[i].trim();\n\n        if (line.indexOf('uniform') > -1) {\n            var splitLine = line.split(' ');\n            var type = splitLine[1];\n\n            var name = splitLine[2];\n            var size = 1;\n\n            if (name.indexOf('[') > -1) {\n                // array!\n                nameSplit = name.split(/\\[|]/);\n                name = nameSplit[0];\n                size *= Number(nameSplit[1]);\n            }\n\n            if (!name.match(maskRegex)) {\n                uniforms[name] = {\n                    value: defaultValue(type, size),\n                    name: name,\n                    type: type\n                };\n            }\n        }\n    }\n\n    return uniforms;\n}\n","map":{"version":3,"sources":["../../../../../src/core/renderers/webgl/filters/extractUniformsFromSrc.js"],"names":["extractUniformsFromSrc","defaultValue","shader","vertexSrc","fragmentSrc","mask","vertUniforms","extractUniformsFromString","fragUniforms","Object","assign","string","maskRegex","RegExp","uniforms","nameSplit","lines","replace","split","i","length","line","trim","indexOf","splitLine","type","name","size","Number","match","value"],"mappings":";;;kBAIwBA,sB;;AAJxB;;;;;;AAEA,IAAMC,eAAe,qBAAOC,MAAP,CAAcD,YAAnC;;AAEe,SAASD,sBAAT,CAAgCG,SAAhC,EAA2CC,WAA3C,EAAwDC,IAAxD,EACf;AACI,QAAMC,eAAeC,0BAA0BJ,SAA1B,EAAqCE,IAArC,CAArB;AACA,QAAMG,eAAeD,0BAA0BH,WAA1B,EAAuCC,IAAvC,CAArB;;AAEA,WAAOI,OAAOC,MAAP,CAAcJ,YAAd,EAA4BE,YAA5B,CAAP;AACH;;AAED,SAASD,yBAAT,CAAmCI,MAAnC,EACA;AACI,QAAMC,YAAY,IAAIC,MAAJ,CAAW,sDAAX,CAAlB;;AAEA,QAAMC,WAAW,EAAjB;AACA,QAAIC,kBAAJ;;AAEA;AACA;AACA,QAAMC,QAAQL,OAAOM,OAAP,CAAe,MAAf,EAAuB,GAAvB,EACDC,KADC,CACK,SADL,CAAd;;AAGA;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,MAAMI,MAA1B,EAAkCD,GAAlC,EACA;AACI,YAAME,OAAOL,MAAMG,CAAN,EAASG,IAAT,EAAb;;AAEA,YAAID,KAAKE,OAAL,CAAa,SAAb,IAA0B,CAAC,CAA/B,EACA;AACI,gBAAMC,YAAYH,KAAKH,KAAL,CAAW,GAAX,CAAlB;AACA,gBAAMO,OAAOD,UAAU,CAAV,CAAb;;AAEA,gBAAIE,OAAOF,UAAU,CAAV,CAAX;AACA,gBAAIG,OAAO,CAAX;;AAEA,gBAAID,KAAKH,OAAL,CAAa,GAAb,IAAoB,CAAC,CAAzB,EACA;AACI;AACAR,4BAAYW,KAAKR,KAAL,CAAW,MAAX,CAAZ;AACAQ,uBAAOX,UAAU,CAAV,CAAP;AACAY,wBAAQC,OAAOb,UAAU,CAAV,CAAP,CAAR;AACH;;AAED,gBAAI,CAACW,KAAKG,KAAL,CAAWjB,SAAX,CAAL,EACA;AACIE,yBAASY,IAAT,IAAiB;AACbI,2BAAO7B,aAAawB,IAAb,EAAmBE,IAAnB,CADM;AAEbD,8BAFa;AAGbD;AAHa,iBAAjB;AAKH;AACJ;AACJ;;AAED,WAAOX,QAAP;AACH","file":"extractUniformsFromSrc.js","sourcesContent":["import glCore from 'pixi-gl-core';\n\nconst defaultValue = glCore.shader.defaultValue;\n\nexport default function extractUniformsFromSrc(vertexSrc, fragmentSrc, mask)\n{\n    const vertUniforms = extractUniformsFromString(vertexSrc, mask);\n    const fragUniforms = extractUniformsFromString(fragmentSrc, mask);\n\n    return Object.assign(vertUniforms, fragUniforms);\n}\n\nfunction extractUniformsFromString(string)\n{\n    const maskRegex = new RegExp('^(projectionMatrix|uSampler|filterArea|filterClamp)$');\n\n    const uniforms = {};\n    let nameSplit;\n\n    // clean the lines a little - remove extra spaces / tabs etc\n    // then split along ';'\n    const lines = string.replace(/\\s+/g, ' ')\n                .split(/\\s*;\\s*/);\n\n    // loop through..\n    for (let i = 0; i < lines.length; i++)\n    {\n        const line = lines[i].trim();\n\n        if (line.indexOf('uniform') > -1)\n        {\n            const splitLine = line.split(' ');\n            const type = splitLine[1];\n\n            let name = splitLine[2];\n            let size = 1;\n\n            if (name.indexOf('[') > -1)\n            {\n                // array!\n                nameSplit = name.split(/\\[|]/);\n                name = nameSplit[0];\n                size *= Number(nameSplit[1]);\n            }\n\n            if (!name.match(maskRegex))\n            {\n                uniforms[name] = {\n                    value: defaultValue(type, size),\n                    name,\n                    type,\n                };\n            }\n        }\n    }\n\n    return uniforms;\n}\n"]}},"hash":"905786764f0abc8c584aa8850dcfe8ac","cacheData":{"env":{}}}