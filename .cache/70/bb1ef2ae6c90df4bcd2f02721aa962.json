{"id":"../node_modules/@dreamirl/dreamengine/node_modules/pixi.js/lib/loaders/index.js","dependencies":[{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\index.js.map","includedInParent":true,"mtime":1505920124000},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\package.json","includedInParent":true,"mtime":1548525594111},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\package.json","includedInParent":true,"mtime":1548517163228},{"name":"./bitmapFontParser","loc":{"line":6,"column":32},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\index.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\bitmapFontParser.js"},{"name":"./spritesheetParser","loc":{"line":21,"column":33},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\index.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\spritesheetParser.js"},{"name":"./textureParser","loc":{"line":36,"column":29},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\index.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\textureParser.js"},{"name":"resource-loader","loc":{"line":45,"column":30},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\index.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\resource-loader\\lib\\index.js"},{"name":"../core/Application","loc":{"line":54,"column":27},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\index.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\Application.js"},{"name":"./loader","loc":{"line":58,"column":22},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\index.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\loader.js"}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\nexports.shared = exports.Resource = exports.textureParser = exports.getResourcePath = exports.spritesheetParser = exports.parseBitmapFontData = exports.bitmapFontParser = exports.Loader = undefined;\n\nvar _bitmapFontParser = require('./bitmapFontParser');\n\nObject.defineProperty(exports, 'bitmapFontParser', {\n    enumerable: true,\n    get: function get() {\n        return _interopRequireDefault(_bitmapFontParser).default;\n    }\n});\nObject.defineProperty(exports, 'parseBitmapFontData', {\n    enumerable: true,\n    get: function get() {\n        return _bitmapFontParser.parse;\n    }\n});\n\nvar _spritesheetParser = require('./spritesheetParser');\n\nObject.defineProperty(exports, 'spritesheetParser', {\n    enumerable: true,\n    get: function get() {\n        return _interopRequireDefault(_spritesheetParser).default;\n    }\n});\nObject.defineProperty(exports, 'getResourcePath', {\n    enumerable: true,\n    get: function get() {\n        return _spritesheetParser.getResourcePath;\n    }\n});\n\nvar _textureParser = require('./textureParser');\n\nObject.defineProperty(exports, 'textureParser', {\n    enumerable: true,\n    get: function get() {\n        return _interopRequireDefault(_textureParser).default;\n    }\n});\n\nvar _resourceLoader = require('resource-loader');\n\nObject.defineProperty(exports, 'Resource', {\n    enumerable: true,\n    get: function get() {\n        return _resourceLoader.Resource;\n    }\n});\n\nvar _Application = require('../core/Application');\n\nvar _Application2 = _interopRequireDefault(_Application);\n\nvar _loader = require('./loader');\n\nvar _loader2 = _interopRequireDefault(_loader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * This namespace contains APIs which extends the {@link https://github.com/englercj/resource-loader resource-loader} module\n * for loading assets, data, and other resources dynamically.\n * @example\n * const loader = new PIXI.loaders.Loader();\n * loader.add('bunny', 'data/bunny.png')\n *       .add('spaceship', 'assets/spritesheet.json');\n * loader.load((loader, resources) => {\n *    // resources.bunny\n *    // resources.spaceship\n * });\n * @namespace PIXI.loaders\n */\nexports.Loader = _loader2.default;\n\n\n/**\n * A premade instance of the loader that can be used to load resources.\n * @name shared\n * @memberof PIXI.loaders\n * @type {PIXI.loaders.Loader}\n */\nvar shared = new _loader2.default();\n\nshared.destroy = function () {\n    // protect destroying shared loader\n};\n\nexports.shared = shared;\n\n// Mixin the loader construction\n\nvar AppPrototype = _Application2.default.prototype;\n\nAppPrototype._loader = null;\n\n/**\n * Loader instance to help with asset loading.\n * @name PIXI.Application#loader\n * @type {PIXI.loaders.Loader}\n */\nObject.defineProperty(AppPrototype, 'loader', {\n    get: function get() {\n        if (!this._loader) {\n            var sharedLoader = this._options.sharedLoader;\n\n            this._loader = sharedLoader ? shared : new _loader2.default();\n        }\n\n        return this._loader;\n    }\n});\n\n// Override the destroy function\n// making sure to destroy the current Loader\nAppPrototype._parentDestroy = AppPrototype.destroy;\nAppPrototype.destroy = function destroy(removeView) {\n    if (this._loader) {\n        this._loader.destroy();\n        this._loader = null;\n    }\n    this._parentDestroy(removeView);\n};\n","map":{"version":3,"sources":["../../src/loaders/index.js"],"names":["default","parse","getResourcePath","Resource","Loader","shared","destroy","AppPrototype","prototype","_loader","Object","defineProperty","get","sharedLoader","_options","_parentDestroy","removeView"],"mappings":";;;;;;;;;;yDAiBSA,O;;;;;;iCAA6BC,K;;;;;;;;;0DAC7BD,O;;;;;;kCAA8BE,e;;;;;;;;;sDAC9BF,O;;;;;;;;;+BAQAG,Q;;;;AA3BT;;;;AACA;;;;;;AAEA;;;;;;;;;;;;;QAaSC,M;;;AAaT;;;;;;AAMA,IAAMC,SAAS,sBAAf;;AAEAA,OAAOC,OAAP,GAAiB,YACjB;AACI;AACH,CAHD;;QAKSD,M,GAAAA,M;;AAET;;AACA,IAAME,eAAe,sBAAYC,SAAjC;;AAEAD,aAAaE,OAAb,GAAuB,IAAvB;;AAEA;;;;;AAKAC,OAAOC,cAAP,CAAsBJ,YAAtB,EAAoC,QAApC,EAA8C;AAC1CK,OAD0C,iBAE1C;AACI,YAAI,CAAC,KAAKH,OAAV,EACA;AACI,gBAAMI,eAAe,KAAKC,QAAL,CAAcD,YAAnC;;AAEA,iBAAKJ,OAAL,GAAeI,eAAeR,MAAf,GAAwB,sBAAvC;AACH;;AAED,eAAO,KAAKI,OAAZ;AACH;AAXyC,CAA9C;;AAcA;AACA;AACAF,aAAaQ,cAAb,GAA8BR,aAAaD,OAA3C;AACAC,aAAaD,OAAb,GAAuB,SAASA,OAAT,CAAiBU,UAAjB,EACvB;AACI,QAAI,KAAKP,OAAT,EACA;AACI,aAAKA,OAAL,CAAaH,OAAb;AACA,aAAKG,OAAL,GAAe,IAAf;AACH;AACD,SAAKM,cAAL,CAAoBC,UAApB;AACH,CARD","file":"index.js","sourcesContent":["import Application from '../core/Application';\nimport Loader from './loader';\n\n/**\n * This namespace contains APIs which extends the {@link https://github.com/englercj/resource-loader resource-loader} module\n * for loading assets, data, and other resources dynamically.\n * @example\n * const loader = new PIXI.loaders.Loader();\n * loader.add('bunny', 'data/bunny.png')\n *       .add('spaceship', 'assets/spritesheet.json');\n * loader.load((loader, resources) => {\n *    // resources.bunny\n *    // resources.spaceship\n * });\n * @namespace PIXI.loaders\n */\nexport { Loader };\nexport { default as bitmapFontParser, parse as parseBitmapFontData } from './bitmapFontParser';\nexport { default as spritesheetParser, getResourcePath } from './spritesheetParser';\nexport { default as textureParser } from './textureParser';\n\n/**\n * Reference to **resource-loader**'s Resource class.\n * See https://github.com/englercj/resource-loader\n * @class Resource\n * @memberof PIXI.loaders\n */\nexport { Resource } from 'resource-loader';\n\n/**\n * A premade instance of the loader that can be used to load resources.\n * @name shared\n * @memberof PIXI.loaders\n * @type {PIXI.loaders.Loader}\n */\nconst shared = new Loader();\n\nshared.destroy = () =>\n{\n    // protect destroying shared loader\n};\n\nexport { shared };\n\n// Mixin the loader construction\nconst AppPrototype = Application.prototype;\n\nAppPrototype._loader = null;\n\n/**\n * Loader instance to help with asset loading.\n * @name PIXI.Application#loader\n * @type {PIXI.loaders.Loader}\n */\nObject.defineProperty(AppPrototype, 'loader', {\n    get()\n    {\n        if (!this._loader)\n        {\n            const sharedLoader = this._options.sharedLoader;\n\n            this._loader = sharedLoader ? shared : new Loader();\n        }\n\n        return this._loader;\n    },\n});\n\n// Override the destroy function\n// making sure to destroy the current Loader\nAppPrototype._parentDestroy = AppPrototype.destroy;\nAppPrototype.destroy = function destroy(removeView)\n{\n    if (this._loader)\n    {\n        this._loader.destroy();\n        this._loader = null;\n    }\n    this._parentDestroy(removeView);\n};\n"]}},"hash":"e198d3bce9f7ffa9ccd98685d928c3eb","cacheData":{"env":{}}}