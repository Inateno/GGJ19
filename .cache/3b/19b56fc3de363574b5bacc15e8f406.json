{"id":"../node_modules/pixi.js/lib/core/graphics/webgl/utils/buildPoly.js","dependencies":[{"name":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/graphics/webgl/utils/buildPoly.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/antoine/Documents/perso/gamedev/GGJ19/package.json","includedInParent":true,"mtime":1548542467768},{"name":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/package.json","includedInParent":true,"mtime":1548541995508},{"name":"./buildLine","loc":{"line":6,"column":25},"parent":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/graphics/webgl/utils/buildPoly.js","resolved":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/graphics/webgl/utils/buildLine.js"},{"name":"../../../utils","loc":{"line":10,"column":21},"parent":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/graphics/webgl/utils/buildPoly.js","resolved":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/utils/index.js"},{"name":"earcut","loc":{"line":12,"column":22},"parent":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/graphics/webgl/utils/buildPoly.js","resolved":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/earcut/src/earcut.js"}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\nexports.default = buildPoly;\n\nvar _buildLine = require('./buildLine');\n\nvar _buildLine2 = _interopRequireDefault(_buildLine);\n\nvar _utils = require('../../../utils');\n\nvar _earcut = require('earcut');\n\nvar _earcut2 = _interopRequireDefault(_earcut);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Builds a polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nfunction buildPoly(graphicsData, webGLData, webGLDataNativeLines) {\n    graphicsData.points = graphicsData.shape.points.slice();\n\n    var points = graphicsData.points;\n\n    if (graphicsData.fill && points.length >= 6) {\n        var holeArray = [];\n        // Process holes..\n        var holes = graphicsData.holes;\n\n        for (var i = 0; i < holes.length; i++) {\n            var hole = holes[i];\n\n            holeArray.push(points.length / 2);\n\n            points = points.concat(hole.points);\n        }\n\n        // get first and last point.. figure out the middle!\n        var verts = webGLData.points;\n        var indices = webGLData.indices;\n\n        var length = points.length / 2;\n\n        // sort color\n        var color = (0, _utils.hex2rgb)(graphicsData.fillColor);\n        var alpha = graphicsData.fillAlpha;\n        var r = color[0] * alpha;\n        var g = color[1] * alpha;\n        var b = color[2] * alpha;\n\n        var triangles = (0, _earcut2.default)(points, holeArray, 2);\n\n        if (!triangles) {\n            return;\n        }\n\n        var vertPos = verts.length / 6;\n\n        for (var _i = 0; _i < triangles.length; _i += 3) {\n            indices.push(triangles[_i] + vertPos);\n            indices.push(triangles[_i] + vertPos);\n            indices.push(triangles[_i + 1] + vertPos);\n            indices.push(triangles[_i + 2] + vertPos);\n            indices.push(triangles[_i + 2] + vertPos);\n        }\n\n        for (var _i2 = 0; _i2 < length; _i2++) {\n            verts.push(points[_i2 * 2], points[_i2 * 2 + 1], r, g, b, alpha);\n        }\n    }\n\n    if (graphicsData.lineWidth > 0) {\n        (0, _buildLine2.default)(graphicsData, webGLData, webGLDataNativeLines);\n    }\n}\n","map":{"version":3,"sources":["../../../../../src/core/graphics/webgl/utils/buildPoly.js"],"names":["buildPoly","graphicsData","webGLData","webGLDataNativeLines","points","shape","slice","fill","length","holeArray","holes","i","hole","push","concat","verts","indices","color","fillColor","alpha","fillAlpha","r","g","b","triangles","vertPos","lineWidth"],"mappings":";;;kBAewBA,S;;AAfxB;;;;AACA;;AACA;;;;;;AAEA;;;;;;;;;;;AAWe,SAASA,SAAT,CAAmBC,YAAnB,EAAiCC,SAAjC,EAA4CC,oBAA5C,EACf;AACIF,iBAAaG,MAAb,GAAsBH,aAAaI,KAAb,CAAmBD,MAAnB,CAA0BE,KAA1B,EAAtB;;AAEA,QAAIF,SAASH,aAAaG,MAA1B;;AAEA,QAAIH,aAAaM,IAAb,IAAqBH,OAAOI,MAAP,IAAiB,CAA1C,EACA;AACI,YAAMC,YAAY,EAAlB;AACA;AACA,YAAMC,QAAQT,aAAaS,KAA3B;;AAEA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,MAAMF,MAA1B,EAAkCG,GAAlC,EACA;AACI,gBAAMC,OAAOF,MAAMC,CAAN,CAAb;;AAEAF,sBAAUI,IAAV,CAAeT,OAAOI,MAAP,GAAgB,CAA/B;;AAEAJ,qBAASA,OAAOU,MAAP,CAAcF,KAAKR,MAAnB,CAAT;AACH;;AAED;AACA,YAAMW,QAAQb,UAAUE,MAAxB;AACA,YAAMY,UAAUd,UAAUc,OAA1B;;AAEA,YAAMR,SAASJ,OAAOI,MAAP,GAAgB,CAA/B;;AAEA;AACA,YAAMS,QAAQ,oBAAQhB,aAAaiB,SAArB,CAAd;AACA,YAAMC,QAAQlB,aAAamB,SAA3B;AACA,YAAMC,IAAIJ,MAAM,CAAN,IAAWE,KAArB;AACA,YAAMG,IAAIL,MAAM,CAAN,IAAWE,KAArB;AACA,YAAMI,IAAIN,MAAM,CAAN,IAAWE,KAArB;;AAEA,YAAMK,YAAY,sBAAOpB,MAAP,EAAeK,SAAf,EAA0B,CAA1B,CAAlB;;AAEA,YAAI,CAACe,SAAL,EACA;AACI;AACH;;AAED,YAAMC,UAAUV,MAAMP,MAAN,GAAe,CAA/B;;AAEA,aAAK,IAAIG,KAAI,CAAb,EAAgBA,KAAIa,UAAUhB,MAA9B,EAAsCG,MAAK,CAA3C,EACA;AACIK,oBAAQH,IAAR,CAAaW,UAAUb,EAAV,IAAec,OAA5B;AACAT,oBAAQH,IAAR,CAAaW,UAAUb,EAAV,IAAec,OAA5B;AACAT,oBAAQH,IAAR,CAAaW,UAAUb,KAAI,CAAd,IAAmBc,OAAhC;AACAT,oBAAQH,IAAR,CAAaW,UAAUb,KAAI,CAAd,IAAmBc,OAAhC;AACAT,oBAAQH,IAAR,CAAaW,UAAUb,KAAI,CAAd,IAAmBc,OAAhC;AACH;;AAED,aAAK,IAAId,MAAI,CAAb,EAAgBA,MAAIH,MAApB,EAA4BG,KAA5B,EACA;AACII,kBAAMF,IAAN,CAAWT,OAAOO,MAAI,CAAX,CAAX,EAA0BP,OAAQO,MAAI,CAAL,GAAU,CAAjB,CAA1B,EACIU,CADJ,EACOC,CADP,EACUC,CADV,EACaJ,KADb;AAEH;AACJ;;AAED,QAAIlB,aAAayB,SAAb,GAAyB,CAA7B,EACA;AACI,iCAAUzB,YAAV,EAAwBC,SAAxB,EAAmCC,oBAAnC;AACH;AACJ","file":"buildPoly.js","sourcesContent":["import buildLine from './buildLine';\nimport { hex2rgb } from '../../../utils';\nimport earcut from 'earcut';\n\n/**\n * Builds a polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nexport default function buildPoly(graphicsData, webGLData, webGLDataNativeLines)\n{\n    graphicsData.points = graphicsData.shape.points.slice();\n\n    let points = graphicsData.points;\n\n    if (graphicsData.fill && points.length >= 6)\n    {\n        const holeArray = [];\n        // Process holes..\n        const holes = graphicsData.holes;\n\n        for (let i = 0; i < holes.length; i++)\n        {\n            const hole = holes[i];\n\n            holeArray.push(points.length / 2);\n\n            points = points.concat(hole.points);\n        }\n\n        // get first and last point.. figure out the middle!\n        const verts = webGLData.points;\n        const indices = webGLData.indices;\n\n        const length = points.length / 2;\n\n        // sort color\n        const color = hex2rgb(graphicsData.fillColor);\n        const alpha = graphicsData.fillAlpha;\n        const r = color[0] * alpha;\n        const g = color[1] * alpha;\n        const b = color[2] * alpha;\n\n        const triangles = earcut(points, holeArray, 2);\n\n        if (!triangles)\n        {\n            return;\n        }\n\n        const vertPos = verts.length / 6;\n\n        for (let i = 0; i < triangles.length; i += 3)\n        {\n            indices.push(triangles[i] + vertPos);\n            indices.push(triangles[i] + vertPos);\n            indices.push(triangles[i + 1] + vertPos);\n            indices.push(triangles[i + 2] + vertPos);\n            indices.push(triangles[i + 2] + vertPos);\n        }\n\n        for (let i = 0; i < length; i++)\n        {\n            verts.push(points[i * 2], points[(i * 2) + 1],\n                r, g, b, alpha);\n        }\n    }\n\n    if (graphicsData.lineWidth > 0)\n    {\n        buildLine(graphicsData, webGLData, webGLDataNativeLines);\n    }\n}\n"]}},"hash":"94c24458eaa5a72862991b115777d2e4","cacheData":{"env":{}}}