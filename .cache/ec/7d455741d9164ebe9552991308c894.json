{"id":"../node_modules/@dreamirl/dreamengine/node_modules/pixi.js/lib/loaders/loader.js","dependencies":[{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\loader.js.map","includedInParent":true,"mtime":1505920124000},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\package.json","includedInParent":true,"mtime":1548525594111},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\package.json","includedInParent":true,"mtime":1548517163228},{"name":"resource-loader","loc":{"line":5,"column":30},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\loader.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\resource-loader\\lib\\index.js"},{"name":"resource-loader/lib/middlewares/parsing/blob","loc":{"line":9,"column":20},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\loader.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\resource-loader\\lib\\middlewares\\parsing\\blob.js"},{"name":"eventemitter3","loc":{"line":11,"column":28},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\loader.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\eventemitter3\\index.js"},{"name":"./textureParser","loc":{"line":15,"column":29},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\loader.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\textureParser.js"},{"name":"./spritesheetParser","loc":{"line":19,"column":33},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\loader.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\spritesheetParser.js"},{"name":"./bitmapFontParser","loc":{"line":23,"column":32},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\loader.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\loaders\\bitmapFontParser.js"}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _resourceLoader = require('resource-loader');\n\nvar _resourceLoader2 = _interopRequireDefault(_resourceLoader);\n\nvar _blob = require('resource-loader/lib/middlewares/parsing/blob');\n\nvar _eventemitter = require('eventemitter3');\n\nvar _eventemitter2 = _interopRequireDefault(_eventemitter);\n\nvar _textureParser = require('./textureParser');\n\nvar _textureParser2 = _interopRequireDefault(_textureParser);\n\nvar _spritesheetParser = require('./spritesheetParser');\n\nvar _spritesheetParser2 = _interopRequireDefault(_spritesheetParser);\n\nvar _bitmapFontParser = require('./bitmapFontParser');\n\nvar _bitmapFontParser2 = _interopRequireDefault(_bitmapFontParser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n *\n * The new loader, extends Resource Loader by Chad Engler: https://github.com/englercj/resource-loader\n *\n * ```js\n * const loader = PIXI.loader; // PixiJS exposes a premade instance for you to use.\n * //or\n * const loader = new PIXI.loaders.Loader(); // you can also create your own if you want\n *\n * const sprites = {};\n *\n * // Chainable `add` to enqueue a resource\n * loader.add('bunny', 'data/bunny.png')\n *       .add('spaceship', 'assets/spritesheet.json');\n * loader.add('scoreFont', 'assets/score.fnt');\n *\n * // Chainable `pre` to add a middleware that runs for each resource, *before* loading that resource.\n * // This is useful to implement custom caching modules (using filesystem, indexeddb, memory, etc).\n * loader.pre(cachingMiddleware);\n *\n * // Chainable `use` to add a middleware that runs for each resource, *after* loading that resource.\n * // This is useful to implement custom parsing modules (like spritesheet parsers, spine parser, etc).\n * loader.use(parsingMiddleware);\n *\n * // The `load` method loads the queue of resources, and calls the passed in callback called once all\n * // resources have loaded.\n * loader.load((loader, resources) => {\n *     // resources is an object where the key is the name of the resource loaded and the value is the resource object.\n *     // They have a couple default properties:\n *     // - `url`: The URL that the resource was loaded from\n *     // - `error`: The error that happened when trying to load (if any)\n *     // - `data`: The raw data that was loaded\n *     // also may contain other properties based on the middleware that runs.\n *     sprites.bunny = new PIXI.TilingSprite(resources.bunny.texture);\n *     sprites.spaceship = new PIXI.TilingSprite(resources.spaceship.texture);\n *     sprites.scoreFont = new PIXI.TilingSprite(resources.scoreFont.texture);\n * });\n *\n * // throughout the process multiple signals can be dispatched.\n * loader.onProgress.add(() => {}); // called once per loaded/errored file\n * loader.onError.add(() => {}); // called once per errored file\n * loader.onLoad.add(() => {}); // called once per loaded file\n * loader.onComplete.add(() => {}); // called once when the queued resources all load.\n * ```\n *\n * @see https://github.com/englercj/resource-loader\n *\n * @class\n * @extends module:resource-loader.ResourceLoader\n * @memberof PIXI.loaders\n */\nvar Loader = function (_ResourceLoader) {\n    _inherits(Loader, _ResourceLoader);\n\n    /**\n     * @param {string} [baseUrl=''] - The base url for all resources loaded by this loader.\n     * @param {number} [concurrency=10] - The number of resources to load concurrently.\n     */\n    function Loader(baseUrl, concurrency) {\n        _classCallCheck(this, Loader);\n\n        var _this = _possibleConstructorReturn(this, _ResourceLoader.call(this, baseUrl, concurrency));\n\n        _eventemitter2.default.call(_this);\n\n        for (var i = 0; i < Loader._pixiMiddleware.length; ++i) {\n            _this.use(Loader._pixiMiddleware[i]());\n        }\n\n        // Compat layer, translate the new v2 signals into old v1 events.\n        _this.onStart.add(function (l) {\n            return _this.emit('start', l);\n        });\n        _this.onProgress.add(function (l, r) {\n            return _this.emit('progress', l, r);\n        });\n        _this.onError.add(function (e, l, r) {\n            return _this.emit('error', e, l, r);\n        });\n        _this.onLoad.add(function (l, r) {\n            return _this.emit('load', l, r);\n        });\n        _this.onComplete.add(function (l, r) {\n            return _this.emit('complete', l, r);\n        });\n        return _this;\n    }\n\n    /**\n     * Adds a default middleware to the PixiJS loader.\n     *\n     * @static\n     * @param {Function} fn - The middleware to add.\n     */\n\n\n    Loader.addPixiMiddleware = function addPixiMiddleware(fn) {\n        Loader._pixiMiddleware.push(fn);\n    };\n\n    /**\n     * Destroy the loader, removes references.\n     */\n\n\n    Loader.prototype.destroy = function destroy() {\n        this.removeAllListeners();\n        this.reset();\n    };\n\n    return Loader;\n}(_resourceLoader2.default);\n\n// Copy EE3 prototype (mixin)\n\n\nexports.default = Loader;\nfor (var k in _eventemitter2.default.prototype) {\n    Loader.prototype[k] = _eventemitter2.default.prototype[k];\n}\n\nLoader._pixiMiddleware = [\n// parse any blob into more usable objects (e.g. Image)\n_blob.blobMiddlewareFactory,\n// parse any Image objects into textures\n_textureParser2.default,\n// parse any spritesheet data into multiple textures\n_spritesheetParser2.default,\n// parse bitmap font data into multiple textures\n_bitmapFontParser2.default];\n\n// Add custom extentions\nvar Resource = _resourceLoader2.default.Resource;\n\nResource.setExtensionXhrType('fnt', Resource.XHR_RESPONSE_TYPE.DOCUMENT);\n","map":{"version":3,"sources":["../../src/loaders/loader.js"],"names":["Loader","baseUrl","concurrency","call","i","_pixiMiddleware","length","use","onStart","add","l","emit","onProgress","r","onError","e","onLoad","onComplete","addPixiMiddleware","fn","push","destroy","removeAllListeners","reset","k","prototype","Resource","setExtensionXhrType","XHR_RESPONSE_TYPE","DOCUMENT"],"mappings":";;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmDqBA,M;;;AAEjB;;;;AAIA,oBAAYC,OAAZ,EAAqBC,WAArB,EACA;AAAA;;AAAA,qDACI,2BAAMD,OAAN,EAAeC,WAAf,CADJ;;AAEI,+BAAaC,IAAb;;AAEA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,OAAOK,eAAP,CAAuBC,MAA3C,EAAmD,EAAEF,CAArD,EACA;AACI,kBAAKG,GAAL,CAASP,OAAOK,eAAP,CAAuBD,CAAvB,GAAT;AACH;;AAED;AACA,cAAKI,OAAL,CAAaC,GAAb,CAAiB,UAACC,CAAD;AAAA,mBAAO,MAAKC,IAAL,CAAU,OAAV,EAAmBD,CAAnB,CAAP;AAAA,SAAjB;AACA,cAAKE,UAAL,CAAgBH,GAAhB,CAAoB,UAACC,CAAD,EAAIG,CAAJ;AAAA,mBAAU,MAAKF,IAAL,CAAU,UAAV,EAAsBD,CAAtB,EAAyBG,CAAzB,CAAV;AAAA,SAApB;AACA,cAAKC,OAAL,CAAaL,GAAb,CAAiB,UAACM,CAAD,EAAIL,CAAJ,EAAOG,CAAP;AAAA,mBAAa,MAAKF,IAAL,CAAU,OAAV,EAAmBI,CAAnB,EAAsBL,CAAtB,EAAyBG,CAAzB,CAAb;AAAA,SAAjB;AACA,cAAKG,MAAL,CAAYP,GAAZ,CAAgB,UAACC,CAAD,EAAIG,CAAJ;AAAA,mBAAU,MAAKF,IAAL,CAAU,MAAV,EAAkBD,CAAlB,EAAqBG,CAArB,CAAV;AAAA,SAAhB;AACA,cAAKI,UAAL,CAAgBR,GAAhB,CAAoB,UAACC,CAAD,EAAIG,CAAJ;AAAA,mBAAU,MAAKF,IAAL,CAAU,UAAV,EAAsBD,CAAtB,EAAyBG,CAAzB,CAAV;AAAA,SAApB;AAdJ;AAeC;;AAED;;;;;;;;WAMOK,iB,8BAAkBC,E,EACzB;AACInB,eAAOK,eAAP,CAAuBe,IAAvB,CAA4BD,EAA5B;AACH,K;;AAED;;;;;qBAGAE,O,sBACA;AACI,aAAKC,kBAAL;AACA,aAAKC,KAAL;AACH,K;;;;;AAGL;;;kBA7CqBvB,M;AA8CrB,KAAK,IAAMwB,CAAX,IAAgB,uBAAaC,SAA7B,EACA;AACIzB,WAAOyB,SAAP,CAAiBD,CAAjB,IAAsB,uBAAaC,SAAb,CAAuBD,CAAvB,CAAtB;AACH;;AAEDxB,OAAOK,eAAP,GAAyB;AACrB;AADqB;AAGrB;AAHqB;AAKrB;AALqB;AAOrB;AAPqB,2BAAzB;;AAWA;AACA,IAAMqB,WAAW,yBAAeA,QAAhC;;AAEAA,SAASC,mBAAT,CAA6B,KAA7B,EAAoCD,SAASE,iBAAT,CAA2BC,QAA/D","file":"loader.js","sourcesContent":["import ResourceLoader from 'resource-loader';\nimport { blobMiddlewareFactory } from 'resource-loader/lib/middlewares/parsing/blob';\nimport EventEmitter from 'eventemitter3';\nimport textureParser from './textureParser';\nimport spritesheetParser from './spritesheetParser';\nimport bitmapFontParser from './bitmapFontParser';\n\n/**\n *\n * The new loader, extends Resource Loader by Chad Engler: https://github.com/englercj/resource-loader\n *\n * ```js\n * const loader = PIXI.loader; // PixiJS exposes a premade instance for you to use.\n * //or\n * const loader = new PIXI.loaders.Loader(); // you can also create your own if you want\n *\n * const sprites = {};\n *\n * // Chainable `add` to enqueue a resource\n * loader.add('bunny', 'data/bunny.png')\n *       .add('spaceship', 'assets/spritesheet.json');\n * loader.add('scoreFont', 'assets/score.fnt');\n *\n * // Chainable `pre` to add a middleware that runs for each resource, *before* loading that resource.\n * // This is useful to implement custom caching modules (using filesystem, indexeddb, memory, etc).\n * loader.pre(cachingMiddleware);\n *\n * // Chainable `use` to add a middleware that runs for each resource, *after* loading that resource.\n * // This is useful to implement custom parsing modules (like spritesheet parsers, spine parser, etc).\n * loader.use(parsingMiddleware);\n *\n * // The `load` method loads the queue of resources, and calls the passed in callback called once all\n * // resources have loaded.\n * loader.load((loader, resources) => {\n *     // resources is an object where the key is the name of the resource loaded and the value is the resource object.\n *     // They have a couple default properties:\n *     // - `url`: The URL that the resource was loaded from\n *     // - `error`: The error that happened when trying to load (if any)\n *     // - `data`: The raw data that was loaded\n *     // also may contain other properties based on the middleware that runs.\n *     sprites.bunny = new PIXI.TilingSprite(resources.bunny.texture);\n *     sprites.spaceship = new PIXI.TilingSprite(resources.spaceship.texture);\n *     sprites.scoreFont = new PIXI.TilingSprite(resources.scoreFont.texture);\n * });\n *\n * // throughout the process multiple signals can be dispatched.\n * loader.onProgress.add(() => {}); // called once per loaded/errored file\n * loader.onError.add(() => {}); // called once per errored file\n * loader.onLoad.add(() => {}); // called once per loaded file\n * loader.onComplete.add(() => {}); // called once when the queued resources all load.\n * ```\n *\n * @see https://github.com/englercj/resource-loader\n *\n * @class\n * @extends module:resource-loader.ResourceLoader\n * @memberof PIXI.loaders\n */\nexport default class Loader extends ResourceLoader\n{\n    /**\n     * @param {string} [baseUrl=''] - The base url for all resources loaded by this loader.\n     * @param {number} [concurrency=10] - The number of resources to load concurrently.\n     */\n    constructor(baseUrl, concurrency)\n    {\n        super(baseUrl, concurrency);\n        EventEmitter.call(this);\n\n        for (let i = 0; i < Loader._pixiMiddleware.length; ++i)\n        {\n            this.use(Loader._pixiMiddleware[i]());\n        }\n\n        // Compat layer, translate the new v2 signals into old v1 events.\n        this.onStart.add((l) => this.emit('start', l));\n        this.onProgress.add((l, r) => this.emit('progress', l, r));\n        this.onError.add((e, l, r) => this.emit('error', e, l, r));\n        this.onLoad.add((l, r) => this.emit('load', l, r));\n        this.onComplete.add((l, r) => this.emit('complete', l, r));\n    }\n\n    /**\n     * Adds a default middleware to the PixiJS loader.\n     *\n     * @static\n     * @param {Function} fn - The middleware to add.\n     */\n    static addPixiMiddleware(fn)\n    {\n        Loader._pixiMiddleware.push(fn);\n    }\n\n    /**\n     * Destroy the loader, removes references.\n     */\n    destroy()\n    {\n        this.removeAllListeners();\n        this.reset();\n    }\n}\n\n// Copy EE3 prototype (mixin)\nfor (const k in EventEmitter.prototype)\n{\n    Loader.prototype[k] = EventEmitter.prototype[k];\n}\n\nLoader._pixiMiddleware = [\n    // parse any blob into more usable objects (e.g. Image)\n    blobMiddlewareFactory,\n    // parse any Image objects into textures\n    textureParser,\n    // parse any spritesheet data into multiple textures\n    spritesheetParser,\n    // parse bitmap font data into multiple textures\n    bitmapFontParser,\n];\n\n// Add custom extentions\nconst Resource = ResourceLoader.Resource;\n\nResource.setExtensionXhrType('fnt', Resource.XHR_RESPONSE_TYPE.DOCUMENT);\n"]}},"hash":"c438d3e20acb0a84a10936be812ae0a3","cacheData":{"env":{}}}