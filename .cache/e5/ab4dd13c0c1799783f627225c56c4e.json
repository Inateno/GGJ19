{"id":"../node_modules/@dreamirl/dreamengine/node_modules/pixi.js/lib/core/renderers/webgl/utils/Quad.js","dependencies":[{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\renderers\\webgl\\utils\\Quad.js.map","includedInParent":true,"mtime":1505920121000},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\package.json","includedInParent":true,"mtime":1548525594111},{"name":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\package.json","includedInParent":true,"mtime":1548517163228},{"name":"pixi-gl-core","loc":{"line":5,"column":26},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\renderers\\webgl\\utils\\Quad.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi-gl-core\\src\\index.js"},{"name":"../../../utils/createIndicesForQuads","loc":{"line":9,"column":37},"parent":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\renderers\\webgl\\utils\\Quad.js","resolved":"C:\\Users\\Grimka\\Documents\\GitHub\\GGJ19\\node_modules\\@dreamirl\\dreamengine\\node_modules\\pixi.js\\lib\\core\\utils\\createIndicesForQuads.js"}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _pixiGlCore = require('pixi-gl-core');\n\nvar _pixiGlCore2 = _interopRequireDefault(_pixiGlCore);\n\nvar _createIndicesForQuads = require('../../../utils/createIndicesForQuads');\n\nvar _createIndicesForQuads2 = _interopRequireDefault(_createIndicesForQuads);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Helper class to create a quad\n *\n * @class\n * @memberof PIXI\n */\nvar Quad = function () {\n  /**\n   * @param {WebGLRenderingContext} gl - The gl context for this quad to use.\n   * @param {object} state - TODO: Description\n   */\n  function Quad(gl, state) {\n    _classCallCheck(this, Quad);\n\n    /**\n     * the current WebGL drawing context\n     *\n     * @member {WebGLRenderingContext}\n     */\n    this.gl = gl;\n\n    /**\n     * An array of vertices\n     *\n     * @member {Float32Array}\n     */\n    this.vertices = new Float32Array([-1, -1, 1, -1, 1, 1, -1, 1]);\n\n    /**\n     * The Uvs of the quad\n     *\n     * @member {Float32Array}\n     */\n    this.uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n\n    this.interleaved = new Float32Array(8 * 2);\n\n    for (var i = 0; i < 4; i++) {\n      this.interleaved[i * 4] = this.vertices[i * 2];\n      this.interleaved[i * 4 + 1] = this.vertices[i * 2 + 1];\n      this.interleaved[i * 4 + 2] = this.uvs[i * 2];\n      this.interleaved[i * 4 + 3] = this.uvs[i * 2 + 1];\n    }\n\n    /**\n     * An array containing the indices of the vertices\n     *\n     * @member {Uint16Array}\n     */\n    this.indices = (0, _createIndicesForQuads2.default)(1);\n\n    /**\n     * The vertex buffer\n     *\n     * @member {glCore.GLBuffer}\n     */\n    this.vertexBuffer = _pixiGlCore2.default.GLBuffer.createVertexBuffer(gl, this.interleaved, gl.STATIC_DRAW);\n\n    /**\n     * The index buffer\n     *\n     * @member {glCore.GLBuffer}\n     */\n    this.indexBuffer = _pixiGlCore2.default.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n\n    /**\n     * The vertex array object\n     *\n     * @member {glCore.VertexArrayObject}\n     */\n    this.vao = new _pixiGlCore2.default.VertexArrayObject(gl, state);\n  }\n\n  /**\n   * Initialises the vaos and uses the shader.\n   *\n   * @param {PIXI.Shader} shader - the shader to use\n   */\n\n\n  Quad.prototype.initVao = function initVao(shader) {\n    this.vao.clear().addIndex(this.indexBuffer).addAttribute(this.vertexBuffer, shader.attributes.aVertexPosition, this.gl.FLOAT, false, 4 * 4, 0).addAttribute(this.vertexBuffer, shader.attributes.aTextureCoord, this.gl.FLOAT, false, 4 * 4, 2 * 4);\n  };\n\n  /**\n   * Maps two Rectangle to the quad.\n   *\n   * @param {PIXI.Rectangle} targetTextureFrame - the first rectangle\n   * @param {PIXI.Rectangle} destinationFrame - the second rectangle\n   * @return {PIXI.Quad} Returns itself.\n   */\n\n\n  Quad.prototype.map = function map(targetTextureFrame, destinationFrame) {\n    var x = 0; // destinationFrame.x / targetTextureFrame.width;\n    var y = 0; // destinationFrame.y / targetTextureFrame.height;\n\n    this.uvs[0] = x;\n    this.uvs[1] = y;\n\n    this.uvs[2] = x + destinationFrame.width / targetTextureFrame.width;\n    this.uvs[3] = y;\n\n    this.uvs[4] = x + destinationFrame.width / targetTextureFrame.width;\n    this.uvs[5] = y + destinationFrame.height / targetTextureFrame.height;\n\n    this.uvs[6] = x;\n    this.uvs[7] = y + destinationFrame.height / targetTextureFrame.height;\n\n    x = destinationFrame.x;\n    y = destinationFrame.y;\n\n    this.vertices[0] = x;\n    this.vertices[1] = y;\n\n    this.vertices[2] = x + destinationFrame.width;\n    this.vertices[3] = y;\n\n    this.vertices[4] = x + destinationFrame.width;\n    this.vertices[5] = y + destinationFrame.height;\n\n    this.vertices[6] = x;\n    this.vertices[7] = y + destinationFrame.height;\n\n    return this;\n  };\n\n  /**\n   * Binds the buffer and uploads the data\n   *\n   * @return {PIXI.Quad} Returns itself.\n   */\n\n\n  Quad.prototype.upload = function upload() {\n    for (var i = 0; i < 4; i++) {\n      this.interleaved[i * 4] = this.vertices[i * 2];\n      this.interleaved[i * 4 + 1] = this.vertices[i * 2 + 1];\n      this.interleaved[i * 4 + 2] = this.uvs[i * 2];\n      this.interleaved[i * 4 + 3] = this.uvs[i * 2 + 1];\n    }\n\n    this.vertexBuffer.upload(this.interleaved);\n\n    return this;\n  };\n\n  /**\n   * Removes this quad from WebGL\n   */\n\n\n  Quad.prototype.destroy = function destroy() {\n    var gl = this.gl;\n\n    gl.deleteBuffer(this.vertexBuffer);\n    gl.deleteBuffer(this.indexBuffer);\n  };\n\n  return Quad;\n}();\n\nexports.default = Quad;\n","map":{"version":3,"sources":["../../../../../src/core/renderers/webgl/utils/Quad.js"],"names":["Quad","gl","state","vertices","Float32Array","uvs","interleaved","i","indices","vertexBuffer","GLBuffer","createVertexBuffer","STATIC_DRAW","indexBuffer","createIndexBuffer","vao","VertexArrayObject","initVao","shader","clear","addIndex","addAttribute","attributes","aVertexPosition","FLOAT","aTextureCoord","map","targetTextureFrame","destinationFrame","x","y","width","height","upload","destroy","deleteBuffer"],"mappings":"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","file":"Quad.js","sourcesContent":["import glCore from 'pixi-gl-core';\nimport createIndicesForQuads from '../../../utils/createIndicesForQuads';\n\n/**\n * Helper class to create a quad\n *\n * @class\n * @memberof PIXI\n */\nexport default class Quad\n{\n    /**\n     * @param {WebGLRenderingContext} gl - The gl context for this quad to use.\n     * @param {object} state - TODO: Description\n     */\n    constructor(gl, state)\n    {\n        /**\n         * the current WebGL drawing context\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = gl;\n\n        /**\n         * An array of vertices\n         *\n         * @member {Float32Array}\n         */\n        this.vertices = new Float32Array([\n            -1, -1,\n            1, -1,\n            1, 1,\n            -1, 1,\n        ]);\n\n        /**\n         * The Uvs of the quad\n         *\n         * @member {Float32Array}\n         */\n        this.uvs = new Float32Array([\n            0, 0,\n            1, 0,\n            1, 1,\n            0, 1,\n        ]);\n\n        this.interleaved = new Float32Array(8 * 2);\n\n        for (let i = 0; i < 4; i++)\n        {\n            this.interleaved[i * 4] = this.vertices[(i * 2)];\n            this.interleaved[(i * 4) + 1] = this.vertices[(i * 2) + 1];\n            this.interleaved[(i * 4) + 2] = this.uvs[i * 2];\n            this.interleaved[(i * 4) + 3] = this.uvs[(i * 2) + 1];\n        }\n\n        /**\n         * An array containing the indices of the vertices\n         *\n         * @member {Uint16Array}\n         */\n        this.indices = createIndicesForQuads(1);\n\n        /**\n         * The vertex buffer\n         *\n         * @member {glCore.GLBuffer}\n         */\n        this.vertexBuffer = glCore.GLBuffer.createVertexBuffer(gl, this.interleaved, gl.STATIC_DRAW);\n\n        /**\n         * The index buffer\n         *\n         * @member {glCore.GLBuffer}\n         */\n        this.indexBuffer = glCore.GLBuffer.createIndexBuffer(gl, this.indices, gl.STATIC_DRAW);\n\n        /**\n         * The vertex array object\n         *\n         * @member {glCore.VertexArrayObject}\n         */\n        this.vao = new glCore.VertexArrayObject(gl, state);\n    }\n\n    /**\n     * Initialises the vaos and uses the shader.\n     *\n     * @param {PIXI.Shader} shader - the shader to use\n     */\n    initVao(shader)\n    {\n        this.vao.clear()\n        .addIndex(this.indexBuffer)\n        .addAttribute(this.vertexBuffer, shader.attributes.aVertexPosition, this.gl.FLOAT, false, 4 * 4, 0)\n        .addAttribute(this.vertexBuffer, shader.attributes.aTextureCoord, this.gl.FLOAT, false, 4 * 4, 2 * 4);\n    }\n\n    /**\n     * Maps two Rectangle to the quad.\n     *\n     * @param {PIXI.Rectangle} targetTextureFrame - the first rectangle\n     * @param {PIXI.Rectangle} destinationFrame - the second rectangle\n     * @return {PIXI.Quad} Returns itself.\n     */\n    map(targetTextureFrame, destinationFrame)\n    {\n        let x = 0; // destinationFrame.x / targetTextureFrame.width;\n        let y = 0; // destinationFrame.y / targetTextureFrame.height;\n\n        this.uvs[0] = x;\n        this.uvs[1] = y;\n\n        this.uvs[2] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[3] = y;\n\n        this.uvs[4] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[5] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        this.uvs[6] = x;\n        this.uvs[7] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        x = destinationFrame.x;\n        y = destinationFrame.y;\n\n        this.vertices[0] = x;\n        this.vertices[1] = y;\n\n        this.vertices[2] = x + destinationFrame.width;\n        this.vertices[3] = y;\n\n        this.vertices[4] = x + destinationFrame.width;\n        this.vertices[5] = y + destinationFrame.height;\n\n        this.vertices[6] = x;\n        this.vertices[7] = y + destinationFrame.height;\n\n        return this;\n    }\n\n    /**\n     * Binds the buffer and uploads the data\n     *\n     * @return {PIXI.Quad} Returns itself.\n     */\n    upload()\n    {\n        for (let i = 0; i < 4; i++)\n        {\n            this.interleaved[i * 4] = this.vertices[(i * 2)];\n            this.interleaved[(i * 4) + 1] = this.vertices[(i * 2) + 1];\n            this.interleaved[(i * 4) + 2] = this.uvs[i * 2];\n            this.interleaved[(i * 4) + 3] = this.uvs[(i * 2) + 1];\n        }\n\n        this.vertexBuffer.upload(this.interleaved);\n\n        return this;\n    }\n\n    /**\n     * Removes this quad from WebGL\n     */\n    destroy()\n    {\n        const gl = this.gl;\n\n        gl.deleteBuffer(this.vertexBuffer);\n        gl.deleteBuffer(this.indexBuffer);\n    }\n}\n"]}},"hash":"dea799429290449da868981aba9ba6ba","cacheData":{"env":{}}}