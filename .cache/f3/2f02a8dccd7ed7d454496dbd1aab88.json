{"id":"../node_modules/pixi.js/lib/core/Shader.js","dependencies":[{"name":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/Shader.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/antoine/Documents/perso/gamedev/GGJ19/package.json","includedInParent":true,"mtime":1548542467768},{"name":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/package.json","includedInParent":true,"mtime":1548541995508},{"name":"pixi-gl-core","loc":{"line":5,"column":26},"parent":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/Shader.js","resolved":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi-gl-core/src/index.js"},{"name":"./settings","loc":{"line":7,"column":24},"parent":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/Shader.js","resolved":"/Users/antoine/Documents/perso/gamedev/GGJ19/node_modules/pixi.js/lib/core/settings.js"}],"generated":{"js":"'use strict';\n\nexports.__esModule = true;\n\nvar _pixiGlCore = require('pixi-gl-core');\n\nvar _settings = require('./settings');\n\nvar _settings2 = _interopRequireDefault(_settings);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction checkPrecision(src, def) {\n    if (src instanceof Array) {\n        if (src[0].substring(0, 9) !== 'precision') {\n            var copy = src.slice(0);\n\n            copy.unshift('precision ' + def + ' float;');\n\n            return copy;\n        }\n    } else if (src.trim().substring(0, 9) !== 'precision') {\n        return 'precision ' + def + ' float;\\n' + src;\n    }\n\n    return src;\n}\n\n/**\n * Wrapper class, webGL Shader for Pixi.\n * Adds precision string if vertexSrc or fragmentSrc have no mention of it.\n *\n * @class\n * @extends GLShader\n * @memberof PIXI\n */\n\nvar Shader = function (_GLShader) {\n    _inherits(Shader, _GLShader);\n\n    /**\n     *\n     * @param {WebGLRenderingContext} gl - The current WebGL rendering context\n     * @param {string|string[]} vertexSrc - The vertex shader source as an array of strings.\n     * @param {string|string[]} fragmentSrc - The fragment shader source as an array of strings.\n     * @param {object} [attributeLocations] - A key value pair showing which location eact attribute should sit.\n                       e.g. {position:0, uvs:1}.\n     * @param {string} [precision] - The float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.\n     */\n    function Shader(gl, vertexSrc, fragmentSrc, attributeLocations, precision) {\n        _classCallCheck(this, Shader);\n\n        return _possibleConstructorReturn(this, _GLShader.call(this, gl, checkPrecision(vertexSrc, precision || _settings2.default.PRECISION_VERTEX), checkPrecision(fragmentSrc, precision || _settings2.default.PRECISION_FRAGMENT), undefined, attributeLocations));\n    }\n\n    return Shader;\n}(_pixiGlCore.GLShader);\n\nexports.default = Shader;\n","map":{"version":3,"sources":["../../src/core/Shader.js"],"names":["checkPrecision","src","def","Array","substring","copy","slice","unshift","trim","Shader","gl","vertexSrc","fragmentSrc","attributeLocations","precision","PRECISION_VERTEX","PRECISION_FRAGMENT","undefined"],"mappings":";;;;AAAA;;AACA;;;;;;;;;;;;AAEA,SAASA,cAAT,CAAwBC,GAAxB,EAA6BC,GAA7B,EACA;AACI,QAAID,eAAeE,KAAnB,EACA;AACI,YAAIF,IAAI,CAAJ,EAAOG,SAAP,CAAiB,CAAjB,EAAoB,CAApB,MAA2B,WAA/B,EACA;AACI,gBAAMC,OAAOJ,IAAIK,KAAJ,CAAU,CAAV,CAAb;;AAEAD,iBAAKE,OAAL,gBAA0BL,GAA1B;;AAEA,mBAAOG,IAAP;AACH;AACJ,KAVD,MAWK,IAAIJ,IAAIO,IAAJ,GAAWJ,SAAX,CAAqB,CAArB,EAAwB,CAAxB,MAA+B,WAAnC,EACL;AACI,8BAAoBF,GAApB,iBAAmCD,GAAnC;AACH;;AAED,WAAOA,GAAP;AACH;;AAED;;;;;;;;;IAQqBQ,M;;;AAEjB;;;;;;;;;AASA,oBAAYC,EAAZ,EAAgBC,SAAhB,EAA2BC,WAA3B,EAAwCC,kBAAxC,EAA4DC,SAA5D,EACA;AAAA;;AAAA,gDACI,qBAAMJ,EAAN,EAAUV,eAAeW,SAAf,EAA0BG,aAAa,mBAASC,gBAAhD,CAAV,EACIf,eAAeY,WAAf,EAA4BE,aAAa,mBAASE,kBAAlD,CADJ,EAC2EC,SAD3E,EACsFJ,kBADtF,CADJ;AAGC;;;;;kBAfgBJ,M","file":"Shader.js","sourcesContent":["import { GLShader } from 'pixi-gl-core';\nimport settings from './settings';\n\nfunction checkPrecision(src, def)\n{\n    if (src instanceof Array)\n    {\n        if (src[0].substring(0, 9) !== 'precision')\n        {\n            const copy = src.slice(0);\n\n            copy.unshift(`precision ${def} float;`);\n\n            return copy;\n        }\n    }\n    else if (src.trim().substring(0, 9) !== 'precision')\n    {\n        return `precision ${def} float;\\n${src}`;\n    }\n\n    return src;\n}\n\n/**\n * Wrapper class, webGL Shader for Pixi.\n * Adds precision string if vertexSrc or fragmentSrc have no mention of it.\n *\n * @class\n * @extends GLShader\n * @memberof PIXI\n */\nexport default class Shader extends GLShader\n{\n    /**\n     *\n     * @param {WebGLRenderingContext} gl - The current WebGL rendering context\n     * @param {string|string[]} vertexSrc - The vertex shader source as an array of strings.\n     * @param {string|string[]} fragmentSrc - The fragment shader source as an array of strings.\n     * @param {object} [attributeLocations] - A key value pair showing which location eact attribute should sit.\n                       e.g. {position:0, uvs:1}.\n     * @param {string} [precision] - The float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.\n     */\n    constructor(gl, vertexSrc, fragmentSrc, attributeLocations, precision)\n    {\n        super(gl, checkPrecision(vertexSrc, precision || settings.PRECISION_VERTEX),\n            checkPrecision(fragmentSrc, precision || settings.PRECISION_FRAGMENT), undefined, attributeLocations);\n    }\n}\n"]}},"hash":"0a4fd979775f45c16083a7affa95ed69","cacheData":{"env":{}}}